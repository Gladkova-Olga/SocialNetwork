{"version":3,"sources":["components/Dialogs/Dialogs.module.css","hoc/withAuthRedirect.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","DialogItem","path","id","className","s","dialog","active","src","avatar","alt","name","Message","message","maxLength50","maxLengthCreator","AddMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","Dialogs","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","dialogsItem","formData","console","log","newMessageBody","onSendMessage","compose","dispatch","sendMessageCreator"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,6BAA6B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,oHCO1KC,EAAkB,SAACC,GACrB,MAAO,CACHC,OAAQD,EAAME,KAAKD,SAIpB,SAASE,EAAoBC,GAUhC,OADiCC,YAAQN,EAARM,EARP,SAACC,GACvB,IAAKL,EAAwBK,EAAxBL,OAAWM,EAAhB,YAA6BD,EAA7B,YACA,OAAKL,EAGE,cAACG,EAAD,eAAeG,IAFX,cAAC,IAAD,CAAUC,GAAK,gB,kFCKnBC,MAXf,SAAoBH,GAChB,IAAII,EAAO,YAAcJ,EAAMK,GAC/B,OACI,sBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,OAAnC,UACI,+BAAM,qBAAKC,IAAKV,EAAMW,OAAQC,IAAI,OAClC,+BAAM,cAAC,IAAD,CAASV,GAAIE,EAAb,SAAoBJ,EAAMa,aCQ7BC,MApBf,SAAiBd,GAKb,OAEI,qBAAKM,UAAWC,IAAEQ,QAAlB,SACI,8BACKf,EAAMe,a,kCC8BvB,IAAMC,EAAcC,YAAiB,IAgBxBC,EAAsBC,YAA+B,CAACC,KAAM,wBAAtCD,EAf6C,SAACnB,GAC7E,OACI,uBAAMqB,SAAUrB,EAAMsB,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CAAOV,KAAM,iBAAkBW,UAAWC,IAAUC,YAAY,qBAChEC,SAAY,CAACC,IAAUZ,OAG3B,8BACI,kDAODa,EAhDf,SAAiB7B,GACb,IAAIN,EAAQM,EAAM8B,YAGdC,EAAkBrC,EAAMsC,QAAQC,KAChC,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAuBrB,KAAMqB,EAAErB,KAAMR,GAAI6B,EAAE7B,GAAIM,OAAQuB,EAAEvB,QAAxCuB,EAAE7B,OAGxB8B,EAAmBzC,EAAM0C,SAASH,KAClC,SAAAI,GAAC,OAAI,cAAC,EAAD,CAAoBtB,QAASsB,EAAEtB,QAASV,GAAIgC,EAAEhC,IAAhCgC,EAAEhC,OAOzB,OACI,sBAAKC,UAAWC,IAAEyB,QAAlB,UACI,qBAAK1B,UAAWC,IAAE+B,YAAlB,SACKP,IAGL,sBAAKzB,UAAWC,IAAE6B,SAAlB,UACI,8BAAMD,IAEN,cAACjB,EAAD,CAAqBG,SAbX,SAACkB,GACnBC,QAAQC,IAAIF,EAASG,gBACrB1C,EAAM2C,cAAcJ,EAASG,0B,iCCGtBE,sBACX7C,aAdkB,SAACL,GACnB,MAAO,CACHoC,YAAapC,EAAMoC,gBAGF,SAACe,GACtB,MAAO,CAIHF,cAAe,SAACD,GAAD,OAA4BG,EAASC,YAAmBJ,SAK3E7C,IAFW+C,CAIdf","file":"static/js/4.0a5c82bf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialogsItem\":\"Dialogs_dialogsItem__8wYI2\",\"active\":\"Dialogs_active__2sQhs\",\"messages\":\"Dialogs_messages__1w_Up\",\"message\":\"Dialogs_message__1xIDh\"};","import React, {ComponentType} from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../Redux/reduxStore\";\n\ntype mapStateToPropType = {\n    isAuth: boolean\n}\nconst mapStateToProps = (state: AppStateType ): mapStateToPropType => {\n    return {\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\n    const RedirectComponent = (props: mapStateToPropType) => {\n        let {isAuth, ...restProps} = props\n        if (!isAuth) {\n            return <Redirect to={ \"/login\"}/>\n        }\n        return <Component {...restProps as T}/>\n    }\n\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\n    return ConnectedRedirectComponent\n}","import React from \"react\";\nimport s from \"../Dialogs.module.css\";\nimport {NavLink} from \"react-router-dom\";\nimport {DialogsType} from \"../../../Redux/dialogsReducer\";\n\n\n// export type DialogsType = {\n//     name: string\n//     id: number\n// }\n\n\nfunction DialogItem(props: DialogsType) {\n    let path = '/dialogs/' + props.id;\n    return (\n        <div className={s.dialog + ' ' + s.active}>\n            <span><img src={props.avatar} alt=\"\"/></span>\n            <span><NavLink to={path}>{props.name}</NavLink></span>\n\n        </div>\n    )\n}\n\nexport default DialogItem;","import React from \"react\";\nimport s from \"../Dialogs.module.css\";\nimport {MessageType} from \"../../../Redux/dialogsReducer\";\n\n\nfunction Message(props: MessageType) {\n    let newMessageElement = React.createRef<HTMLTextAreaElement>();\n    let addMessage = () => {\n       let text =  newMessageElement.current?.value;\n    }\n    return (\n\n        <div className={s.message}>\n            <div>\n                {props.message}\n            </div>\n            {/*<div>*/}\n            {/*<textarea ref = {addMessage}></textarea>*/}\n            {/*<button onClick={addMessage}>Add</button>*/}\n            {/*</div>*/}\n        </div>\n    )\n\n}\n\nexport default Message;","import React from \"react\";\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport s from './Dialogs.module.css'\nimport Message from \"./Message/Message\";\nimport {DialogsPropsType} from \"./DialogsContainer\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {Textarea} from \"../common/FormsControls/FormsControl\";\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\n\ntype MessageFormDataType = {\n    newMessageBody: string\n}\n\nfunction Dialogs(props: DialogsPropsType) {\n    let state = props.dialogsPage;\n\n\n    let dialogsElements = state.dialogs.map(\n        d => <DialogItem key={d.id} name={d.name} id={d.id} avatar={d.avatar}/>\n    );\n\n    let messagesElements = state.messages.map(\n        m => <Message key={m.id} message={m.message} id={m.id}/>\n    );\n\n    const AddNewMessage = (formData: MessageFormDataType) => {\n        console.log(formData.newMessageBody)\n        props.onSendMessage(formData.newMessageBody)\n    }\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItem}>\n                {dialogsElements}\n            </div>\n\n            <div className={s.messages}>\n                <div>{messagesElements}</div>\n\n                <AddMessageReduxForm onSubmit={AddNewMessage}/>\n\n            </div>\n        </div>\n    )\n}\nconst maxLength50 = maxLengthCreator(50)\nexport const AddMessageForm: React.FC<InjectedFormProps<MessageFormDataType>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field name={\"newMessageBody\"} component={Textarea} placeholder='Enter your message'\n                validate = {[required, maxLength50]} >\n                </Field>\n            </div>\n            <div>\n                <button>Send</button>\n            </div>\n        </form>\n    )\n}\n\nexport const AddMessageReduxForm = reduxForm<MessageFormDataType>({form: \"dialogAddMessageForm\"})(AddMessageForm)\nexport default Dialogs;\n\n\n\n","import React from \"react\";\nimport Dialogs from \"./Dialogs\";\nimport {DialogsPageType, sendMessageCreator} from \"../../Redux/dialogsReducer\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../Redux/reduxStore\";\nimport {compose, Dispatch} from \"redux\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\n\ntype MapStateToPropsType = {\n    dialogsPage: DialogsPageType\n}\ntype MapDispatchToPropsType = {\n    // updateNewMessageBody: (body: string) => void\n    onSendMessage: (newMessageBody: string) => void\n}\nexport type DialogsPropsType = MapStateToPropsType & MapDispatchToPropsType\n\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => { //state of all application\n    return {\n        dialogsPage: state.dialogsPage\n    }\n}\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => { //dispatch: Dispatch(from Redux)\n    return {\n        // updateNewMessageBody: (body: string) => {\n        //     dispatch(updateNewMessageBodyCreator(body))\n        // },\n        onSendMessage: (newMessageBody: string) => dispatch(sendMessageCreator(newMessageBody)),\n    }\n}\nexport default compose<React.ComponentType>(\n    connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppStateType>(mapStateToProps, mapDispatchToProps),\n    withAuthRedirect\n)\n(Dialogs)\n\n// const DialogsContainer = withAuthRedirect(connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppStateType>(mapStateToProps, mapDispatchToProps)(Dialogs));\n//\n// export default DialogsContainer;"],"sourceRoot":""}