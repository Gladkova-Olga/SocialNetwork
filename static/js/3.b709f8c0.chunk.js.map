{"version":3,"sources":["hoc/withAuthRedirect.tsx","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPost/Post/MyPosts.module.css","components/Profile/MyPost/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPost/Post/Post.tsx","components/Profile/MyPost/Post/MyPosts.tsx","components/Profile/MyPost/Post/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","module","exports","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","onBlur","updateUserStatus","autoFocus","ProfileInfo","profile","className","s","descriptionBlock","src","photos","large","fullName","aboutMe","Preloader","Post","item","message","likesCount","maxLength10","maxLengthCreator","AddNewPostReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","name","component","Textarea","validate","required","MyPosts","console","log","postsElements","posts","map","p","id","postsBlock","formData","addPost","newPostText","MyPostsContainer","profilePage","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getUserStatus","React","compose","withRouter"],"mappings":"2MAQMA,EAAkB,SAACC,GACrB,MAAO,CACHC,OAAQD,EAAME,KAAKD,SAIpB,SAASE,EAAoBC,GAUhC,OADiCC,YAAQN,EAARM,EARP,SAACC,GACvB,IAAKL,EAAwBK,EAAxBL,OAAWM,EAAhB,YAA6BD,EAA7B,YACA,OAAKL,EAGE,cAACG,EAAD,eAAeG,IAFX,cAAC,IAAD,CAAUC,GAAK,gB,oBCjBlCC,EAAOC,QAAU,CAAC,iBAAmB,wC,oBCArCD,EAAOC,QAAU,CAAC,WAAa,8B,oBCA/BD,EAAOC,QAAU,CAAC,KAAO,qB,6IC2CVC,EApCgB,SAACL,GAC5B,MAAgCM,oBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA4BF,mBAASN,EAAMS,QAA3C,mBAAOA,EAAP,KAAeC,EAAf,KACAC,qBAAU,WACND,EAAUV,EAAMS,UACjB,CAACT,EAAMS,SAWV,OACI,iCACMF,GACF,8BACI,sBAAMK,cAbO,kBAAMJ,GAAY,IAa/B,SAAwCR,EAAMS,QAAU,WAG3DF,GACD,8BACI,uBAAOM,SAbI,SAACC,GACpBJ,EAAUI,EAAEC,cAAcC,QAYeC,OAjBlB,WACvBT,GAAY,GACZR,EAAMkB,iBAAiBT,IAe8CU,WAAW,EAAMH,MAAOP,UCHtFW,MAlBf,SAAqBpB,GACjB,OAAKA,EAAMqB,QAIP,8BACI,sBAAKC,UAAWC,IAAEC,iBAAlB,UACI,qBAAKC,IAAKzB,EAAMqB,QAAQK,OAAOC,MAAQ3B,EAAMqB,QAAQK,OAAOC,MAAQ,KACnE3B,EAAMqB,QAAQO,SACd5B,EAAMqB,QAAQQ,QACf,cAAC,EAAD,CAAwBpB,OAAQT,EAAMS,OAAQS,iBAAkBlB,EAAMkB,wBARvE,cAACY,EAAA,EAAD,K,4CCMAC,MAdf,SAAc/B,GACV,OACI,sBAAKsB,UAAWC,IAAES,KAAlB,UACI,qBACIP,IAAI,wGACPzB,EAAMiC,QACP,gCACI,yCADJ,IACwBjC,EAAMkC,kB,kCC6B1C,IAAMC,EAAcC,YAAiB,IAgB9BC,EAAsBC,YAA8B,CAACC,KAAM,yBAArCD,EAf4C,SAACtC,GAEtE,OACI,uBAAMwC,SAAUxC,EAAMyC,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CAAOC,YAAY,WAAWC,KAAM,cAAeC,UAAWC,IACvDC,SAAY,CAACC,IAAUb,OAElC,8BACI,sDAQDc,EAzCf,SAAiBjD,GACbkD,QAAQC,IAAI,mBACZ,IAAIC,EAAgBpD,EAAMqD,MAAMC,KAC5B,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAMtB,QAASsB,EAAEtB,QAASC,WAAYqB,EAAErB,WAAYsB,GAAID,EAAEC,QAQnE,OACI,sBAAKlC,UAAWC,IAAEkC,WAAlB,UACI,yCACA,cAACpB,EAAD,CAAqBG,SARb,SAACkB,GACb1D,EAAM2D,QAAQD,EAASE,gBASnB,qBAAKtC,UAAWC,IAAE8B,MAAlB,SACKD,Q,QCHFS,EAFU9D,aAXH,SAACL,GAAD,MAAgD,CAClEkE,YAAalE,EAAMoE,YAAYF,YAC/BP,MAAO3D,EAAMoE,YAAYT,UAGJ,SAACU,GAAD,MAAiD,CACtEJ,QAAS,SAACC,GACNG,EAASC,YAAqBJ,QAIb7D,CAA4GkD,GCNtHgB,EAZE,SAACjE,GAGd,OAFAkD,QAAQC,IAAI,WAGR,gCACI,cAAC,EAAD,CAAa9B,QAAWrB,EAAMqB,QAASZ,OAAQT,EAAMS,OAAQS,iBAAkBlB,EAAMkB,mBACrF,cAAC,EAAD,Q,wBCSNgD,E,uKAEF,WACI,IAAIC,GAAyBC,KAAKpE,MAAMqE,MAAMC,OAAOH,OAChDA,IACDA,EAASC,KAAKpE,MAAMuE,mBAEhBH,KAAKpE,MAAMwE,QAAQC,KAAK,UAGhCL,KAAKpE,MAAM0E,eAAeP,GAC1BC,KAAKpE,MAAM2E,cAAcR,K,oBAI7B,WACI,OACI,cAAC,EAAD,2BAAaC,KAAKpE,OAAlB,IACSqB,QAAS+C,KAAKpE,MAAMqB,QACpBZ,OAAQ2D,KAAKpE,MAAMS,OACnBS,iBAAkBkD,KAAKpE,MAAMkB,wB,GApBnB0D,IAAM9E,WAiCtB+E,sBACX9E,aARkB,SAACL,GAAD,MAA+C,CACjE2B,QAAS3B,EAAMoE,YAAYzC,QAC3BZ,OAAQf,EAAMoE,YAAYrD,OAC1B8D,iBAAkB7E,EAAME,KAAKuE,OAC7BxE,OAAQD,EAAME,KAAKD,UAKD,CAAC+E,mBAAgBC,kBAAezD,uBAClD4D,IACAjF,IAJWgF,CAKbX","file":"static/js/3.b709f8c0.chunk.js","sourcesContent":["import React, {ComponentType} from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../Redux/reduxStore\";\n\ntype mapStateToPropType = {\n    isAuth: boolean\n}\nconst mapStateToProps = (state: AppStateType ): mapStateToPropType => {\n    return {\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\n    const RedirectComponent = (props: mapStateToPropType) => {\n        let {isAuth, ...restProps} = props\n        if (!isAuth) {\n            return <Redirect to={ \"/login\"}/>\n        }\n        return <Component {...restProps as T}/>\n    }\n\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\n    return ConnectedRedirectComponent\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3cd8Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__10oO-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__ueSlo\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\n\n\ntype PropsType = {\n    status: string\n    updateUserStatus: (status: string) => any\n}\n\nconst ProfileStatusWithHooks = (props: PropsType) => {\n    const [editMode, setEditMode] = useState(false);\n    const [status, setStatus] = useState(props.status);\n    useEffect(() => {\n        setStatus(props.status)\n    }, [props.status])\n\n    const activateEditMode = () => setEditMode(true);\n    const deactivateEditMode = () => {\n        setEditMode(false);\n        props.updateUserStatus(status)\n    }\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setStatus(e.currentTarget.value)\n    }\n\n    return (\n        <div>\n            {!editMode &&\n            <div>\n                <span onDoubleClick={activateEditMode}>{props.status || \"----\"}</span>\n            </div>\n            }\n            {editMode &&\n            <div>\n                <input onChange={onStatusChange} onBlur={deactivateEditMode} autoFocus={true} value={status}\n                />\n            </div>\n            }\n\n        </div>\n    )\n\n\n}\n\nexport default ProfileStatusWithHooks;","import React from \"react\";\nimport s from './ProfileInfo.module.css';\nimport Preloader from \"../../common/preloader/Preloader\";\nimport {ProfileUserType} from \"../../../Redux/profileReducer\";\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\n\ntype PropsType = {\n    profile: null | ProfileUserType\n    status: string\n    updateUserStatus: (status: string) => any\n}\n\nfunction ProfileInfo(props: PropsType) {\n    if (!props.profile) {\n        return <Preloader/>\n    }\n    return (\n        <div>\n            <div className={s.descriptionBlock}>\n                <img src={props.profile.photos.large ? props.profile.photos.large : ''}/>\n                {props.profile.fullName}\n                {props.profile.aboutMe}\n                <ProfileStatusWithHooks status={props.status} updateUserStatus={props.updateUserStatus}/>\n                {/*With classComponent*/}\n                {/*<ProfileStatus status={props.status} updateUserStatus={props.updateUserStatus} />*/}\n            </div>\n        </div>\n    )\n}\n\nexport default ProfileInfo;","import React from \"react\";\nimport s from './Post.module.css';\nimport {PostType} from \"../../../../Redux/profileReducer\";\n\n\n\nfunction Post(props: PostType) {\n    return (\n        <div className={s.item}>\n            <img\n                src='https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTCgPWBtcWfGpFd3n6ma11amy6vQwYYZ8oj9A&usqp=CAU'/>\n            {props.message}\n            <div>\n                <span>like </span> {props.likesCount}\n            </div>\n\n        </div>\n    )\n}\n\nexport default Post;","import React from \"react\";\nimport s from './MyPosts.module.css';\nimport Post from \"./Post\";\nimport {PostType,} from \"../../../../Redux/profileReducer\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, required} from \"../../../../utils/validators/validators\";\nimport {Textarea} from \"../../../common/FormsControls/FormsControl\";\n\n\ntype MyPostsType = {\n    posts: Array<PostType>\n    newPostText: string\n    addPost: (newText: string) => void\n}\ntype MyPostFormDataType = {\n    newPostText: string\n}\n\n\nfunction MyPosts(props: MyPostsType) {\n    console.log(\"Render My Posts\")\n    let postsElements = props.posts.map(\n        p => <Post message={p.message} likesCount={p.likesCount} id={p.id}/>\n    );\n\n    let onAddPost = (formData: MyPostFormDataType) => {\n        props.addPost(formData.newPostText)\n    }\n\n\n    return (\n        <div className={s.postsBlock}>\n            <h3>My post</h3>\n            <AddNewPostReduxForm onSubmit={onAddPost}/>\n\n            <div className={s.posts}>\n                {postsElements}\n            </div>\n        </div>\n    )\n}\n\nconst maxLength10 = maxLengthCreator(10)\n const AddNewPostForm: React.FC<InjectedFormProps<MyPostFormDataType>> = (props) => {\n\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field placeholder=\"New post\" name={'newPostText'} component={Textarea}\n                       validate = {[required, maxLength10]} />\n            </div>\n            <div>\n                <button>Add post</button>\n            </div>\n        </form>\n    )\n}\n\n const AddNewPostReduxForm = reduxForm<MyPostFormDataType>({form: \"ProfileAddNewPostForm\"})(AddNewPostForm)\n\nexport default MyPosts;","import React from \"react\";\n\nimport {addPostActionCreator, PostType,\n} from \"../../../../Redux/profileReducer\";\nimport MyPosts from \"./MyPosts\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../../../Redux/reduxStore\";\nimport {Dispatch} from \"redux\";\n\ntype MapStateToPropsType = {\n    posts: Array<PostType>\n    newPostText: string\n\n}\ntype MapDispatchToPropsType = {\n\n    addPost: (newText: string) => void\n}\n\n\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType  => ({\n    newPostText: state.profilePage.newPostText,\n    posts: state.profilePage.posts\n})\n\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => ({\n    addPost: (newPostText: string) => {\n        dispatch(addPostActionCreator(newPostText));\n    }\n})\n\nconst MyPostsContainer = connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppStateType>(mapStateToProps, mapDispatchToProps)(MyPosts);\n\nexport default MyPostsContainer;","import React from \"react\";\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\nimport MyPostsContainer from \"./MyPost/Post/MyPostsContainer\";\nimport {ProfileUserType} from \"../../Redux/profileReducer\";\n\n\ntype ProfilePropsType = {\n    profile: null | ProfileUserType\n    status: string\n    updateUserStatus: (status: string) => any\n}\n\n\nconst  Profile = (props: ProfilePropsType) => {\n    console.log(\"profile\")\n\n    return (\n        <div>\n            <ProfileInfo profile = {props.profile} status={props.status} updateUserStatus={props.updateUserStatus}/>\n            <MyPostsContainer\n            />\n        </div>\n    )\n}\n\nexport default Profile;\n\n","import React from \"react\";\nimport Profile from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../Redux/reduxStore\";\nimport {getUserProfile, getUserStatus, ProfileUserType, updateUserStatus} from \"../../Redux/profileReducer\";\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\n\n\ntype PathParamsType = {\n    userId: string\n}\ntype MapStateToPropsType = {\n    profile: null | ProfileUserType\n    status: string\n    authorizedUserId: number | null\n    isAuth: boolean\n}\ntype MapDispatchToPropsType = {\n    getUserProfile: (userId: number | null) => any\n    getUserStatus: (userId: number | null) => any\n    updateUserStatus: (status: string) => any\n}\nexport type ProfileAPIComponentPropsType = MapStateToPropsType & MapDispatchToPropsType\ntype PropsType = RouteComponentProps<PathParamsType> & ProfileAPIComponentPropsType\n\n\nclass ProfileContainer extends React.Component<PropsType> {\n\n    componentDidMount() {\n        let userId: number | null = +this.props.match.params.userId; //change type to number, because from PathParams we get string\n        if (!userId) {\n            userId = this.props.authorizedUserId\n            if (!userId) {\n                this.props.history.push(\"/login\")\n            }\n        }\n        this.props.getUserProfile(userId);\n        this.props.getUserStatus(userId);\n\n    }\n\n    render() {\n        return (\n            <Profile {...this.props}\n                     profile={this.props.profile}\n                     status={this.props.status}\n                     updateUserStatus={this.props.updateUserStatus}/>\n        )\n    }\n\n}\n\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    authorizedUserId: state.auth.userId,\n    isAuth: state.auth.isAuth\n})\n\nexport default compose<React.ComponentType>(\n    connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppStateType>\n    (mapStateToProps, {getUserProfile, getUserStatus, updateUserStatus}),\n    withRouter,\n    withAuthRedirect\n)(ProfileContainer)\n\n\n"],"sourceRoot":""}