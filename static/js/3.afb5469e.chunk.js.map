{"version":3,"sources":["hoc/withAuthRedirect.tsx","components/Profile/ProfileInfo/ProfileInfo.module.scss","components/Profile/ProfileInfo/ProfileStatusWithHooks.module.scss","components/Profile/ProfileInfo/ProfileDataForm.module.scss","components/Profile/MyPost/Post/MyPosts.module.scss","components/Profile/MyPost/Post/Post.module.scss","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPost/Post/Post.tsx","components/Profile/MyPost/Post/MyPosts.tsx","components/Profile/MyPost/Post/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","module","exports","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","className","s","statusContainer","onDoubleClick","onChange","e","currentTarget","value","onBlur","updateUserStatus","autoFocus","ProfileDataReduxForm","reduxForm","form","handleSubmit","profile","error","onSubmit","styles","profileDataFormContainer","summaryError","field","Field","placeholder","name","component","Input","validate","Textarea","type","Object","keys","contacts","map","key","styleBtn","btnSecondVariant","onClick","Contact","contactTitle","contactValue","profileData","ProfileData","isOwner","goToEditMode","profileDataContainer","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","contactsContainer","ProfileInfo","profileInfoContainer","mainPhoto","src","photos","large","userPhoto","editImage","id","target","files","length","savePhoto","authorizedUserId","editImageInput","htmlFor","formData","saveProfile","then","initialValues","Preloader","Post","postContainer","message","likes","likesCount","maxLength10","maxLengthCreator","AddNewPostReduxForm","postFormContainer","required","MyPosts","postsElements","posts","p","latestPostsBlock","blockTitle","addPost","newPostText","postsBlock","MyPostsContainer","profilePage","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","history","push","getUserProfile","getUserStatus","refreshProfile","prevProps","prevState","snapshot","React","compose","withRouter"],"mappings":"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","file":"static/js/3.afb5469e.chunk.js","sourcesContent":["import React, {ComponentType} from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../Redux/reduxStore\";\n\ntype mapStateToPropType = {\n    isAuth: boolean\n}\nconst mapStateToProps = (state: AppStateType ): mapStateToPropType => {\n    return {\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\n    const RedirectComponent = (props: mapStateToPropType) => {\n        let {isAuth, ...restProps} = props\n        if (!isAuth) {\n            return <Redirect to={ \"/login\"}/>\n        }\n        return <Component {...restProps as T}/>\n    }\n\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\n    return ConnectedRedirectComponent\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfoContainer\":\"ProfileInfo_profileInfoContainer__1Rpv0\",\"mainPhoto\":\"ProfileInfo_mainPhoto__E2WaB\",\"editImage\":\"ProfileInfo_editImage__1ta2T\",\"editImageInput\":\"ProfileInfo_editImageInput__1fZDZ\",\"profileDataContainer\":\"ProfileInfo_profileDataContainer__5YBQH\",\"profileData\":\"ProfileInfo_profileData__12mUh\",\"contactsContainer\":\"ProfileInfo_contactsContainer__2HMpA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statusContainer\":\"ProfileStatusWithHooks_statusContainer__2c6NA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileDataFormContainer\":\"ProfileDataForm_profileDataFormContainer__3Japq\",\"field\":\"ProfileDataForm_field__3R9wP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"latestPostsBlock\":\"MyPosts_latestPostsBlock__3gqiM\",\"blockTitle\":\"MyPosts_blockTitle__2iTpK\",\"postsBlock\":\"MyPosts_postsBlock__12Tjy\",\"postFormContainer\":\"MyPosts_postFormContainer__1VFt-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postContainer\":\"Post_postContainer__3ExCE\",\"likes\":\"Post_likes__jP5gZ\"};","import React, {ChangeEvent, FC, useEffect, useState} from \"react\";\nimport s from \"./ProfileStatusWithHooks.module.scss\"\n\ntype PropsType = {\n    status: string\n    updateUserStatus: (status: string) => any\n}\n\nconst ProfileStatusWithHooks = (props: PropsType) => {\n    const [editMode, setEditMode] = useState(false);\n    const [status, setStatus] = useState(props.status);\n    useEffect(() => {\n        setStatus(props.status)\n    }, [props.status])\n\n    const activateEditMode = () => setEditMode(true);\n    const deactivateEditMode = () => {\n        setEditMode(false);\n        props.updateUserStatus(status)\n    }\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setStatus(e.currentTarget.value)\n    }\n\n    return (\n        <div className={s.statusContainer}>\n            {!editMode &&\n            <div>\n                <span onDoubleClick={activateEditMode}>{props.status || \"----\"}</span>\n            </div>\n            }\n            {editMode &&\n            <div>\n                <input onChange={onStatusChange} onBlur={deactivateEditMode} autoFocus={true} value={status}\n                />\n            </div>\n            }\n\n        </div>\n    )\n\n\n}\n\nexport default ProfileStatusWithHooks;","import {ProfileUserType} from \"../../../Redux/profileReducer\";\nimport React from \"react\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {Input, Textarea} from \"../../common/FormsControls/FormsControl\";\nimport s from \"../../common/FormsControls/FormControls.module.scss\";\nimport styleBtn from \"../../../styles/common/Btn.module.scss\"\nimport styles from \"./ProfileDataForm.module.scss\"\n\nexport type ProfileDataFormType = ProfileUserType\n\ntype PropsType = {\n    profile: ProfileUserType\n}\n\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileDataFormType, PropsType> & PropsType> =\n    ({handleSubmit, profile, error}) => {\n        return (\n            <form onSubmit={handleSubmit} className={styles.profileDataFormContainer}>\n                <div>\n                    {error && <div className={s.summaryError}>{error}</div>}\n                </div>\n                <div>My name is {\n                    <span className={styles.field}> <Field placeholder={\"full name\"} name={\"fullName\"} component={Input}\n                                                           validate={[]}/></span>\n                }</div>\n                <div>About me:\n                    <span className={styles.field}>\n                    <Field placeholder={\"About me\"} name={\"aboutMe\"} component={Textarea} validate={[]}/>\n                </span>\n                </div>\n                <div>Looking for a job:\n                    <span className={styles.field}>\n                    <Field placeholder={\"\"} name={\"lookingForAJob\"} component={Input} validate={[]} type=\"checkbox\"/>\n                </span></div>\n\n                <div>My professional skills:\n                    <span className={styles.field}>\n                <Field placeholder={\"My professional skills\"} name={\"lookingForAJobDescription\"} component={Textarea}\n                       validate={[]}/>\n                </span>\n                </div>\n                <div>{Object.keys(profile.contacts).map(key => {\n                    const name = \"contacts.\" + key\n                    return <div key={key}>\n                    <span> {key}: <span className={styles.field}>\n                        <Field placeholder={key} name={name} component={Input} validate={[]}/>\n                    </span>\n                    </span>\n                    </div>\n                })}</div>\n                <button className={styleBtn.btnSecondVariant} onClick={() => {\n                }}>save\n                </button>\n            </form>\n        )\n\n    }\nconst ProfileDataReduxForm = reduxForm<ProfileDataFormType, PropsType>({form: 'edit-profile'})(ProfileDataForm)\nexport default ProfileDataReduxForm;","import React, {ChangeEvent, useState} from \"react\";\nimport s from './ProfileInfo.module.scss';\nimport Preloader from \"../../common/preloader/Preloader\";\nimport {ContactsType, ProfileUserType} from \"../../../Redux/profileReducer\";\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\nimport userPhoto from \"../../../assets/images/User_icon.png\";\nimport ProfileDataForm, {ProfileDataFormType} from \"./ProfileDataForm\";\nimport styleBtn from \"../../../styles/common/Btn.module.scss\"\n\ntype PropsType = {\n    profile: null | ProfileUserType\n    status: string\n    updateUserStatus: (status: string) => any\n    isOwner: boolean\n    savePhoto: (e: any, userId: number | null) => void\n    authorizedUserId: number | null\n    saveProfile: (formData: ProfileDataFormType) => Promise<any>\n}\n\nfunction ProfileInfo(props: PropsType) {\n    const [editMode, setEditMode] = useState(false);\n\n    if (!props.profile) {\n        return <Preloader/>\n    }\n    const onMainPhotoSelector = (e: ChangeEvent<HTMLInputElement>) => {\n        if (e.target.files?.length) {\n            props.savePhoto(e.target.files[0], props.authorizedUserId)\n        }\n    }\n    const goToEditMode = () => setEditMode(true);\n    const onSubmit = (formData: ProfileDataFormType) => {\n        props.saveProfile(formData).then(\n            () => setEditMode(false)\n        )\n    }\n\n    return (\n        <div className={s.profileInfoContainer}>\n            <div>\n                <img className={s.mainPhoto} src={props.profile.photos.large ? props.profile.photos.large : userPhoto}/>\n                <div>\n                    {props.isOwner &&\n                    <div className={s.editImage}>\n                        <input type={\"file\"} name={\"file\"} id={\"file\"} onChange={onMainPhotoSelector} className={s.editImageInput}/>\n                        <label htmlFor=\"file\" className={styleBtn.btnSecondVariant}>Change Image</label>\n                    </div>\n                    }\n                </div>\n            </div>\n            <div>\n                <ProfileStatusWithHooks status={props.status} updateUserStatus={props.updateUserStatus}/>\n                {editMode ?\n                    <span> <ProfileDataForm onSubmit={onSubmit} profile={props.profile}\n                                            initialValues={props.profile}/> </span> :\n                    <ProfileData profile={props.profile} isOwner={props.isOwner} goToEditMode={goToEditMode}/>}\n            </div>\n        </div>\n\n    )\n}\n\ntype ContactsPropsType = {\n    contactTitle: string\n    contactValue: string | null\n}\nexport const Contact: React.FC<ContactsPropsType> = ({contactTitle, contactValue}) => {\n    return (\n        <div className={s.contacts}>\n            <span className={s.profileData}>{contactTitle}:</span> {contactValue}\n        </div>\n    )\n}\ntype ProfileDataType = {\n    profile: ProfileUserType\n    isOwner: boolean\n    goToEditMode: () => void\n}\n\n\nexport const ProfileData: React.FC<ProfileDataType> = ({profile, isOwner, goToEditMode}) => {\n    return (\n        <div className={s.profileDataContainer}>\n            <div>Hi! My name is <span className={s.profileData}>{profile.fullName}</span></div>\n            <div>About me: <span className={s.profileData}> {profile.aboutMe}</span></div>\n            <div>Looking for a job: <span className={s.profileData}>{profile.lookingForAJob ? \"yes\" : \"no\"}</span></div>\n            {profile.lookingForAJob &&\n            <div>My professional skills: <span className={s.profileData}>{profile.lookingForAJobDescription}</span>\n            </div>}\n            <div className={s.contactsContainer}> {Object\n                .keys(profile.contacts)\n                .map((key) => {\n                    return <Contact contactTitle={key} key={key}\n                                    contactValue={profile.contacts[key as keyof ContactsType]}/>\n                })}</div>\n            {isOwner && <div>\n                <button onClick={goToEditMode} className={styleBtn.btnSecondVariant}>Edit Profile</button>\n            </div>}\n        </div>\n    )\n\n}\n\n\nexport default ProfileInfo;","import React from \"react\";\nimport s from './Post.module.scss';\nimport {PostType} from \"../../../../Redux/profileReducer\";\n\n\n\nfunction Post(props: PostType) {\n    return (\n        <div className={s.postContainer}>\n            {props.message}\n            <div>\n                <span className={s.likes}>like {props.likesCount}</span>\n            </div>\n\n        </div>\n    )\n}\n\nexport default Post;","import React from \"react\";\nimport s from './MyPosts.module.scss';\nimport Post from \"./Post\";\nimport {PostType,} from \"../../../../Redux/profileReducer\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, required} from \"../../../../utils/validators/validators\";\nimport {Textarea} from \"../../../common/FormsControls/FormsControl\";\nimport styleBtn from \"../../../../styles/common/Btn.module.scss\"\n\n\ntype MyPostsType = {\n    posts: Array<PostType>\n    newPostText: string\n    addPost: (newText: string) => void\n}\ntype MyPostFormDataType = {\n    newPostText: string\n}\n\n\nfunction MyPosts(props: MyPostsType) {\n    let postsElements = props.posts.map(\n        p => <Post key={p.id} message={p.message} likesCount={p.likesCount} id={p.id}/>\n    );\n\n    let onAddPost = (formData: MyPostFormDataType) => {\n        props.addPost(formData.newPostText)\n    }\n\n\n    return (\n        <div className={s.latestPostsBlock}>\n            <div className={s.blockTitle}>Latest posts</div>\n            <AddNewPostReduxForm onSubmit={onAddPost}/>\n\n            <div className={s.postsBlock}>\n                {postsElements}\n            </div>\n        </div>\n    )\n}\n\nconst maxLength10 = maxLengthCreator(10)\n const AddNewPostForm: React.FC<InjectedFormProps<MyPostFormDataType>> = (props) => {\n\n    return (\n        <form onSubmit={props.handleSubmit} className={s.postFormContainer}>\n            <div>\n                <Field placeholder=\"New post\" name={'newPostText'} component={Textarea}\n                       validate = {[required, maxLength10]} />\n            </div>\n            <div>\n                <button className={styleBtn.btnSecondVariant}>Add post</button>\n            </div>\n        </form>\n    )\n}\n\n const AddNewPostReduxForm = reduxForm<MyPostFormDataType>({form: \"ProfileAddNewPostForm\"})(AddNewPostForm)\n\nexport default MyPosts;","import React from \"react\";\n\nimport {addPostActionCreator, PostType,\n} from \"../../../../Redux/profileReducer\";\nimport MyPosts from \"./MyPosts\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../../../Redux/reduxStore\";\nimport {Dispatch} from \"redux\";\n\ntype MapStateToPropsType = {\n    posts: Array<PostType>\n    newPostText: string\n\n}\ntype MapDispatchToPropsType = {\n\n    addPost: (newText: string) => void\n}\n\n\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType  => ({\n    newPostText: state.profilePage.newPostText,\n    posts: state.profilePage.posts\n})\n\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => ({\n    addPost: (newPostText: string) => {\n        dispatch(addPostActionCreator(newPostText));\n    }\n})\n\nconst MyPostsContainer = connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppStateType>(mapStateToProps, mapDispatchToProps)(MyPosts);\n\nexport default MyPostsContainer;","import React from \"react\";\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\nimport MyPostsContainer from \"./MyPost/Post/MyPostsContainer\";\nimport {ProfileUserType} from \"../../Redux/profileReducer\";\nimport {ProfileDataFormType} from \"./ProfileInfo/ProfileDataForm\";\n\n\ntype ProfilePropsType = {\n    profile: null | ProfileUserType\n    status: string\n    updateUserStatus: (status: string) => any\n    isOwner: boolean\n    savePhoto: (e: File, userId: number | null) => void\n    authorizedUserId: number | null\n    saveProfile: (formData: ProfileDataFormType) => Promise<any>\n}\n\n\nconst  Profile = (props: ProfilePropsType) => {\n\n    return (\n        <div>\n            <ProfileInfo profile = {props.profile} status={props.status} updateUserStatus={props.updateUserStatus}\n            isOwner = {props.isOwner} savePhoto={props.savePhoto} authorizedUserId={props.authorizedUserId}\n            saveProfile={props.saveProfile}/>\n            <MyPostsContainer/>\n        </div>\n    )\n}\n\nexport default Profile;\n\n","import React from \"react\";\nimport Profile from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../Redux/reduxStore\";\nimport {\n    getUserProfile,\n    getUserStatus,\n    ProfileUserType,\n    savePhoto,\n    saveProfile,\n    updateUserStatus\n} from \"../../Redux/profileReducer\";\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\nimport {ProfileDataFormType} from \"./ProfileInfo/ProfileDataForm\";\n\n\ntype PathParamsType = {\n    userId: string\n}\ntype MapStateToPropsType = {\n    profile: null | ProfileUserType\n    status: string\n    authorizedUserId: number | null\n    isAuth: boolean\n}\ntype MapDispatchToPropsType = {\n    getUserProfile: (userId: number | null) => any\n    getUserStatus: (userId: number | null) => any\n    updateUserStatus: (status: string) => any\n    savePhoto: (e: File, userId: number | null) => void\n    saveProfile: (formData: ProfileDataFormType) => any\n}\nexport type ProfileAPIComponentPropsType = MapStateToPropsType & MapDispatchToPropsType\ntype PropsType = RouteComponentProps<PathParamsType> & ProfileAPIComponentPropsType\n\n\nclass ProfileContainer extends React.Component<PropsType> {\n    refreshProfile() {\n        let userId: number | null = +this.props.match.params.userId; //change type to number, because from PathParams we get string\n        if (!userId) {\n            userId = this.props.authorizedUserId\n            if (!userId) {\n                this.props.history.push(\"/login\")\n            }\n        }\n        this.props.getUserProfile(userId);\n        this.props.getUserStatus(userId);\n    }\n\n    componentDidMount() {\n        this.refreshProfile()\n    }\n\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any) {\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\n            this.refreshProfile()\n        }\n\n    }\n\n    render() {\n        return (\n            <Profile {...this.props}\n                     profile={this.props.profile}\n                     status={this.props.status}\n                     updateUserStatus={this.props.updateUserStatus}\n                     isOwner = {!this.props.match.params.userId}\n                     savePhoto={this.props.savePhoto}\n                     authorizedUserId = {this.props.authorizedUserId}\n                     saveProfile = {this.props.saveProfile}\n            />\n        )\n    }\n\n}\n\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    authorizedUserId: state.auth.userId,\n    isAuth: state.auth.isAuth\n})\n\nexport default compose<React.ComponentType>(\n    connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppStateType>\n    (mapStateToProps, {getUserProfile, getUserStatus, updateUserStatus, savePhoto, saveProfile}),\n    withRouter,\n    withAuthRedirect\n)(ProfileContainer)\n\n\n"],"sourceRoot":""}