{"version":3,"sources":["Redux/dialogsReducer.tsx","components/common/paginator/Paginator.module.css","components/Users/users.module.css","api/api.ts","components/Navbar/Navbar.module.css","reportWebVitals.ts","components/Navbar/Navbar.tsx","components/News/News.tsx","components/Settings/Settings.tsx","components/Music/Music.tsx","Redux/sidebarReducer.tsx","utils/objectsHelper.ts","Redux/usersReducer.ts","Redux/authReducer.ts","Redux/appReducer.ts","Redux/reduxStore.ts","components/common/paginator/Paginators.tsx","assets/images/User_icon.png","components/Users/User.tsx","components/Users/Users.tsx","Redux/usersSelector.ts","components/Users/UsersContainer.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","hoc/withSuspense.tsx","App.tsx","index.tsx","assets/images/loader.gif","components/common/preloader/Preloader.tsx","components/common/FormsControls/FormControls.module.css","components/common/FormsControls/FormsControl.tsx","utils/validators/validators.ts","components/Header/Header.module.css","Redux/profileReducer.tsx"],"names":["SEND_MESSAGE","initialState","messages","id","message","newMessageBody","dialogs","name","avatar","sendMessageCreator","type","dialogsReducer","state","action","body","module","exports","instance","axios","create","baseURL","withCredentials","headers","usersAPI","getUsers","currentPage","pageSize","get","then","response","data","unfollowUser","userID","delete","followUser","post","authAPI","authMe","login","email","password","rememberMe","captcha","logout","profileAPI","getUserProfile","userId","getUserStatus","updateUserStatus","status","put","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Navbar","props","className","s","nav","item","to","activeClassName","activeLink","News","Settings","Music","friends","sidebarReducer","updateObjectInArray","items","itemId","objPropertyName","newObjProp","map","u","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","users","totalUsersCount","isFetching","followingInProgress","followSuccess","unfollowSuccess","setCurrentPage","toggleIsFetching","toggleFollowingProgress","followUnfollowFlow","dispatch","apiMethod","actionCreator","a","resultCode","usersReducer","followed","totalCount","filter","SET_USER_DATA","isAuth","setAuthUserData","payload","getAuthUserData","initialized","appReducer","rootReducer","combineReducers","profilePage","profileReducer","dialogsPage","sidebar","usersPage","auth","app","form","formReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","Paginator","pagesCount","Math","ceil","totalItemsCount","pages","i","push","portionCount","portionSize","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","onClick","disabled","p","styles","selectedPage","onPageChanged","User","user","unfollow","follow","src","photos","small","userPhoto","some","Users","getUsersSelector","createSelector","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","pageNumber","this","Preloader","React","Component","connect","bind","Header","header","loginBlock","HeaderContainer","LoginReduxForm","reduxForm","handleSubmit","error","onSubmit","Field","placeholder","component","Input","validate","required","summaryError","length","stopSubmit","_error","formData","withSuspense","Suspense","fallback","DialogsContainer","lazy","ProfileContainer","App","initializeApp","path","render","Login","AppContainer","withRouter","SamuraiJSApp","ReactDOM","StrictMode","document","getElementById","loader","FormControl","input","meta","child","hasError","touched","formControl","children","Textarea","restProps","value","maxLengthCreator","maxLength","ADD_POST","SET_USER_PROFILE","SET_USER_STATUS","DELETE_POST","posts","likesCount","newPostText","profile","addPostActionCreator","setUserStatus","newPost","postId"],"mappings":"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","file":"static/js/main.95685607.chunk.js","sourcesContent":["\n\n\nconst SEND_MESSAGE = 'dialogs/SEND-MESSAGE';\n\ntype ActionsTypes =\n ReturnType<typeof sendMessageCreator>\n\nexport type DialogsPageType = {\n    messages: Array<MessageType>\n    dialogs: Array<DialogsType>\n    newMessageBody: string\n}\nexport type DialogsType = {\n    name: string\n    id: number\n    avatar: string\n}\nexport type MessageType = {\n    id: number\n    message: string}\n\nconst initialState: DialogsPageType = {\n        messages: [\n            {id: 1, message: 'Hi!'},\n            {id: 2, message: 'How are you?'},\n            {id: 3, message: 'Yo!'},\n        ],\n        newMessageBody: '',\n        dialogs: [\n            {id: 1, name: 'Lisa', avatar: 'https://pets2.me/media/res/1/3/1/9/2/13192.ozimro.300.jpg'},\n            {\n                id: 2,\n                name: 'Bob',\n                avatar: 'https://cs4.pikabu.ru/post_img/big/2015/06/27/6/1435397110_577794048.png'\n            },\n            {id: 3, name: 'Jane', avatar: 'https://sun9-14.userapi.com/c698/u89838553/113490960/x_ff0ef64c.jpg'},\n            {\n                id: 4,\n                name: 'Mary',\n                avatar: 'https://images11.esquire.ru/upload/custom/c41/c41ba98ac9188061e2b0952cdcab9b71.jpg'\n            },\n            {id: 5, name: 'Jack', avatar: 'https://img.gazeta.ru/files3/837/5731837/bat-pic668-668x444-36724.jpg'},\n        ],\n    };\n\n// for this reducer state is state.dialogsPage, we give here only this part of state.\n// It's important to give a type oe return of function\nconst dialogsReducer = (state:DialogsPageType = initialState, action: ActionsTypes): DialogsPageType => {\n\n    switch (action.type) {\n        case SEND_MESSAGE: {\n            let body = action.newMessageBody\n            return {\n                ...state,\n                messages:  [...state.messages, {id: 6, message: body}],\n            };\n        }\n\n        default:\n            return state;\n    }\n\n\n}\n\nexport const sendMessageCreator = (newMessageBody:string) => ({\n    type: SEND_MESSAGE,\n    newMessageBody\n}) as const\n\nexport default dialogsReducer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectedPage\":\"Paginator_selectedPage__bOFQE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"users_userPhoto__1_En6\"};","import axios from \"axios\";\nimport {UserType} from \"../Redux/usersReducer\";\nimport {ProfileUserType} from \"../Redux/profileReducer\";\n\ntype AuthDataType = {\n    email: string\n    id: number\n    login: string\n}\n\ntype CommonResponseType<T = {}> = {\n    data:  T\n    fieldsErrors: string[]\n    messages: string[]\n    resultCode: number\n}\ntype UserResponseType = {\n    error: null | string\n    items: Array<UserType>\n    totalCount: number\n}\n\n\n\nconst instance = axios.create({\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n    withCredentials: true,\n    headers: {\n        \"API-KEY\": \"ac9f8bba-4f9b-409e-bf86-a85be8d0bfe1\"\n    }\n\n})\nexport const usersAPI = {\n    getUsers(currentPage: number = 1, pageSize: number = 10 )  {\n        return  instance.get<UserResponseType>(`users?page=${currentPage}&count=${pageSize}`)\n            .then(response => response.data)\n},\n    unfollowUser(userID: number)  {\n        return  instance.delete<CommonResponseType>(`follow/${userID}`)\n            .then(response => response.data)\n    },\n    followUser(userID:number) {\n        return instance.post<CommonResponseType>(`follow/${userID}`)\n            .then(response => response.data)\n    }\n}\n\nexport const authAPI = {\n    authMe() {\n        return instance.get<CommonResponseType<AuthDataType>>(`auth/me`)\n            .then(response => response.data)\n    },\n    login(email: string, password: string, rememberMe: boolean = false, captcha: boolean | null = null) {\n        return instance.post<CommonResponseType<{userId: number}>>(`auth/login`, {email, password, rememberMe, captcha})\n    },\n    logout() {\n        return instance.delete<CommonResponseType>(`auth/login`,)\n    }\n}\n\nexport const profileAPI = {\n    getUserProfile(userId: number | null) {\n        return instance.get<ProfileUserType>(`profile/${userId}` )\n            .then(response => response.data)\n    },\n    getUserStatus(userId: number | null) {\n        return instance.get<string>(`profile/status/${userId}`)\n    },\n    updateUserStatus(status: string) {\n        return instance.put<CommonResponseType>(`profile/status`, {status})\n    }\n}\n\n\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2imOE\",\"item\":\"Navbar_item__zmMk4\",\"activeLink\":\"Navbar_activeLink__3etBE\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport s from './Navbar.module.css';\nimport DialogItem from \"../Dialogs/DialogItem/DialogItem\";\nimport {DialogsType} from \"../../Redux/dialogsReducer\";\n\n\ntype NavbarType = {\n    // state: Array<DialogsType>\n}\n\nfunction Navbar(props: NavbarType) {\n    // let friendsElements = props.state.map(\n    //     d => <DialogItem name={d.name} id={d.id} avatar={d.avatar}/>\n    // );\n    return (\n        <nav className = {s.nav}>\n            <div className = {`${s.item}`}>\n                <NavLink to=\"/profile\" activeClassName ={s.activeLink}>Profile</NavLink>\n            </div>\n            <div className = {s.item}>\n                <NavLink  to=\"/dialogs\" activeClassName={s.activeLink}>Messages</NavLink>\n            </div>\n            <div className = {s.item}>\n                <NavLink  to=\"/users\" activeClassName={s.activeLink}>Users</NavLink>\n            </div>\n            <div className = {s.item}>\n                <NavLink  to={\"/news\"} activeClassName={s.activeLink}>News</NavLink>\n            </div>\n            <div className = {s.item}>\n                <NavLink to={\"/music\"} activeClassName={s.activeLink}>Music</NavLink>\n            </div>\n            <div className = {s.item}>\n                <NavLink to={\"/settings\"} activeClassName={s.activeLink}>Settings</NavLink>\n            </div>\n\n            {/*<div className={s.item}>*/}\n            {/*    <h3>Friends</h3>*/}\n            {/*    {friendsElements}*/}\n\n            {/*</div>*/}\n        </nav>\n    )\n}\n//console.log(s); show what in s\n\nexport default Navbar;\n\n\n","import React from \"react\";\nimport s from './News.module.css'\n\n\nfunction News(props: any) {\n    return (\n        <div>\n            News\n        </div>\n    )\n}\n\nexport default News;\n","import React from \"react\";\n\n\nfunction Settings(props: any) {\n    return (\n        <div>\n            Settings\n        </div>\n    )\n}\n\nexport default Settings;\n","import React from \"react\";\nimport s from './Music.module.css'\n\n\nfunction Music(props: any) {\n    return (\n        <div>\n            Music\n        </div>\n    )\n}\n\nexport default Music;\n","\nimport {DialogsType} from \"./dialogsReducer\";\n\nexport type SidebarType = {\n    friends: Array<DialogsType>\n}\ntype ActionsTypes = any\n\n\nconst initialState: SidebarType = {\n    friends: [\n        {id: 1, name: 'Lisa', avatar: 'https://pets2.me/media/res/1/3/1/9/2/13192.ozimro.300.jpg'},\n        {\n            id: 2,\n            name: 'Bob',\n            avatar: 'https://cs4.pikabu.ru/post_img/big/2015/06/27/6/1435397110_577794048.png'\n        },\n        {id: 3, name: 'Jane', avatar: 'https://sun9-14.userapi.com/c698/u89838553/113490960/x_ff0ef64c.jpg'},\n    ]\n\n};\n\nconst sidebarReducer= (state: SidebarType = initialState, action: ActionsTypes): SidebarType => {\n\n    return state;\n}\n\nexport default sidebarReducer;","\n\n// common function for reducers\nimport {UserType} from \"../Redux/usersReducer\";\n\nexport const updateObjectInArray = (items: Array<UserType>, itemId: number, objPropertyName: string, newObjProp: {}  ) => {\n    return items.map(u => {\n            // @ts-ignore\n        if (u[objPropertyName] === itemId) {\n                return {...u, ...newObjProp}\n            }\n            return u;\n        })\n}\n","import {usersAPI} from \"../api/api\";\nimport {Dispatch} from \"redux\";\nimport {updateObjectInArray} from \"../utils/objectsHelper\";\n\nconst FOLLOW = 'users/FOLLOW';\nconst UNFOLLOW = 'users/UNFOLLOW';\nconst SET_USERS = 'users/SET_USERS';\nconst SET_CURRENT_PAGE = 'users/SET_CURRENT_PAGE'\nconst SET_TOTAL_USERS_COUNT = 'users/SET_TOTAL_USERS_COUNT'\nconst TOGGLE_IS_FETCHING = 'users/TOGGLE_IS_FETCHING'\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'users/TOGGLE_IS_FOLLOWING_PROGRESS'\n\n\nexport type UserType = {\n    id: number\n    followed: boolean\n    name: string\n    status: string\n    photos: {\n        small: string | null\n        large: string | null\n    }\n}\nexport type UsersPageType = typeof initialState\n\ntype ActionsType = ReturnType<typeof followSuccess> |\n    ReturnType<typeof unfollowSuccess> |\n    ReturnType<typeof setUsers> |\n    ReturnType<typeof setCurrentPage> |\n    ReturnType<typeof setTotalUsersCount> |\n    ReturnType<typeof toggleIsFetching> |\n    ReturnType<typeof toggleFollowingProgress>\n\n\nlet initialState = {\n    users: [] as Array<UserType>,\n    pageSize: 10,\n    totalUsersCount: 0,\n    currentPage: 1,\n    isFetching: false,\n    followingInProgress: [] as Array<number>,\n}\n\nconst usersReducer = (state: UsersPageType = initialState, action: ActionsType): UsersPageType => {\n    switch (action.type) {\n        case FOLLOW:\n            return {\n                ...state,\n                users: updateObjectInArray(state.users, action.userID, \"id\", {followed: true})\n            }\n        case UNFOLLOW:\n            return {\n                ...state,\n                users: updateObjectInArray(state.users, action.userID, \"id\", {followed: false})\n            }\n        case SET_USERS: {\n            return {\n                ...state,\n                users: action.users\n            }\n        }\n        case SET_CURRENT_PAGE: {\n            return {\n                ...state,\n                currentPage: action.currentPage\n            }\n        }\n        case SET_TOTAL_USERS_COUNT: {\n            return {\n                ...state,\n                totalUsersCount: action.totalCount\n            }\n        }\n        case TOGGLE_IS_FETCHING: {\n            return {\n                ...state,\n                isFetching: action.isFetching,\n            }\n        }\n        case TOGGLE_IS_FOLLOWING_PROGRESS: {\n            return {\n                ...state,\n                followingInProgress: action.isFetching\n                    ? [...state.followingInProgress, action.userID]\n                    : state.followingInProgress.filter(id => id !== action.userID)\n\n\n            }\n        }\n        default:\n            return state;\n    }\n\n}\n\n\nexport const followSuccess = (userID: number) => ({\n    type: FOLLOW, userID\n} as const);\nexport const unfollowSuccess = (userID: number) => ({type: UNFOLLOW, userID} as const);\nexport const setUsers = (users: Array<UserType>) => ({type: SET_USERS, users} as const);\nexport const setCurrentPage = (currentPage: number) => ({type: SET_CURRENT_PAGE, currentPage} as const);\nexport const setTotalUsersCount = (totalCount: number) => ({type: SET_TOTAL_USERS_COUNT, totalCount} as const);\nexport const toggleIsFetching = (isFetching: boolean) => ({type: TOGGLE_IS_FETCHING, isFetching} as const);\nexport const toggleFollowingProgress = (isFetching: boolean, userID: number) => ({\n    type: TOGGLE_IS_FOLLOWING_PROGRESS, isFetching, userID,\n} as const);\n\nexport const getUsers = (currentPage: number, pageSize: number) => {\n    return async (dispatch: Dispatch) => { //thunk\n        dispatch(toggleIsFetching(true));\n        dispatch(setCurrentPage(currentPage))\n        const data = await usersAPI.getUsers(currentPage, pageSize)\n        dispatch(toggleIsFetching(false));\n        dispatch(setUsers(data.items));\n        dispatch(setTotalUsersCount(data.totalCount));\n    }\n}\n\nconst followUnfollowFlow = async (dispatch: Dispatch, userID: number, apiMethod: Function, actionCreator: Function) => {\n    dispatch(toggleFollowingProgress(true, userID))\n    const data = await apiMethod(userID)\n    if (data.resultCode === 0) {\n        dispatch(actionCreator(userID))\n    }\n    dispatch(toggleFollowingProgress(false, userID))\n}\n\nexport const follow = (userID: number) => {\n    return async (dispatch: Dispatch) => { //thunk\n        let apiMethod = usersAPI.followUser.bind(usersAPI);\n        await followUnfollowFlow(dispatch, userID, apiMethod, followSuccess)\n    }\n}\n\nexport const unfollow = (userID: number) => {\n    return async (dispatch: Dispatch) => { //thunk\n        let apiMethod = usersAPI.unfollowUser.bind(usersAPI);\n        await followUnfollowFlow(dispatch, userID, apiMethod, unfollowSuccess)\n    }\n}\n\n\nexport default usersReducer;","import {authAPI} from \"../api/api\";\nimport {ThunkAction, ThunkDispatch} from \"redux-thunk\";\nimport {AppStateType} from \"./reduxStore\";\nimport {FormAction, stopSubmit} from \"redux-form\";\n\n\nconst SET_USER_DATA = 'auth/SET_USER_DATA';\n\ntype ActionsType = ReturnType<typeof setAuthUserData>\n\ntype InitialStateType = {\n    userId: number | null\n    email: null | string\n    login: null | string\n    isAuth: boolean\n}\ntype ThunkType = ThunkAction<any, AppStateType, unknown, ActionsType>\n\nlet initialState: InitialStateType = {\n    userId: null,\n    email: null,\n    login: null,\n    isAuth: false\n};\n\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case SET_USER_DATA:\n            return {\n                ...state,\n                ...action.payload,\n            };\n\n        default:\n            return state;\n    }\n}\n\nexport const setAuthUserData = (userId: number | null, email: string | null, login: string | null, isAuth: boolean) =>\n    ({type: SET_USER_DATA, payload: {userId, email, login, isAuth}} as const)\n\nexport const getAuthUserData = (): ThunkType => {\n    return async (dispatch: ThunkDispatch<AppStateType, unknown, ActionsType>) => {\n        let response = await authAPI.authMe()\n        if (response.resultCode === 0) {\n            let {email, id, login} = response.data;\n            dispatch(setAuthUserData(id, email, login, true));\n        }\n    }\n}\n\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: boolean | null): ThunkType => {\n    return async (dispatch: ThunkDispatch<AppStateType, unknown, ActionsType | FormAction>) => {\n        let response = await authAPI.login(email, password, rememberMe, captcha)\n        if (response.data.resultCode === 0) {\n            dispatch(getAuthUserData());\n        } else {\n            let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\"\n            dispatch(stopSubmit(\"login\", {_error: message}))\n        }\n    }\n\n}\n\nexport const logout = (): ThunkType => {\n    return async (dispatch: ThunkDispatch<AppStateType, unknown, ActionsType>) => {\n        let response = await authAPI.logout()\n        if (response.data.resultCode === 0) {\n            dispatch(setAuthUserData(null, null, null, false));\n        }\n    }\n}\n\n\n\n","import React from \"react\";\nimport {ThunkAction, ThunkDispatch} from \"redux-thunk\";\nimport {AppStateType} from \"./reduxStore\";\nimport {getAuthUserData} from \"./authReducer\";\n\ntype AppInitializedType = typeof initialState\ntype SetInitializedActionType = ReturnType<typeof initializedSuccessAC>\ntype ActionsType = SetInitializedActionType\n\nconst INITIALIZED_SUCCESS = \"INITIALIZED_SUCCESS\";\n\nlet initialState = {\n    initialized: false\n}\ntype ThunkType = ThunkAction<void, AppStateType, unknown, ActionsType>\n\nconst appReducer = (state: AppInitializedType = initialState, action: ActionsType): AppInitializedType => {\n    switch (action.type) {\n        case \"INITIALIZED_SUCCESS\":\n            return {\n                ...state,\n                initialized: true\n            }\n        default:\n            return state\n\n    }\n}\n\n\nexport const initializedSuccessAC = () => ({\n    type: INITIALIZED_SUCCESS\n} as const)\n\nexport const initializeApp = (): ThunkType =>\n    (dispatch: ThunkDispatch<AppStateType, unknown, ActionsType>) => {\n     let promise = dispatch(getAuthUserData())\n        promise.then (() => {\n            dispatch(initializedSuccessAC())\n        })\n\n\n    }\n\nexport default appReducer","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\nimport profileReducer from \"./profileReducer\";\nimport dialogsReducer from \"./dialogsReducer\";\nimport sidebarReducer from \"./sidebarReducer\";\nimport usersReducer from \"./usersReducer\";\nimport {authReducer} from \"./authReducer\";\nimport thunkMiddleware from \"redux-thunk\"\nimport { reducer as formReducer } from \"redux-form\";\nimport appReducer from \"./appReducer\";\n\n\nlet rootReducer = combineReducers({\n    profilePage: profileReducer,\n    dialogsPage: dialogsReducer,\n    sidebar: sidebarReducer,\n    usersPage: usersReducer,\n    auth: authReducer,\n    app: appReducer,\n    form: formReducer,\n\n})\n\n\nexport type AppStateType = ReturnType<typeof rootReducer> //typeof - return type of function,\n// ReturnType<typeof rootReducer> return type of function return\n\n//@ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(rootReducer, /* preloadedState, */ composeEnhancers( applyMiddleware(thunkMiddleware)\n));\n\n// let store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n//@ts-ignore\nwindow.store = store\n\nexport default store;","import styles from \"./Paginator.module.css\";\nimport React, {useState} from \"react\";\n\ntype PaginatorPropsType = {\n    totalItemsCount: number\n    pageSize: number\n    currentPage: number\n    onPageChanged: (pageNumber: number) => void\n    portionSize: number\n}\n\nconst Paginator = (props: PaginatorPropsType) => {\n    const pagesCount = Math.ceil(props.totalItemsCount / props.pageSize);\n    const pages = [];\n    for (let i = 1; i <= pagesCount; i++) {\n        pages.push(i);\n    }\n    const portionCount = Math.ceil(pagesCount / props.portionSize);\n    const [portionNumber, setPortionNumber] = useState(1);\n    const leftPortionPageNumber = (portionNumber - 1) * props.pageSize + 1;\n    const rightPortionPageNumber = portionNumber * props.pageSize;\n\n\n    return (\n        <div>\n            <button onClick={() => setPortionNumber(portionNumber - 1)} disabled={portionNumber <= 1}>\n                PREV\n            </button>\n            {pages\n                .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\n                .map(p => {\n                    return (\n                        <span className={(p === props.currentPage) ? styles.selectedPage : ''}\n                              onClick={() => {\n                                  props.onPageChanged(p)\n                              }}\n                        > {p}</span>\n                    )\n                })}\n            <button onClick={() => setPortionNumber(portionNumber + 1)} disabled={portionNumber >= portionCount}>\n                NEXT\n            </button>\n\n        </div>\n    )\n}\nexport default Paginator;\n","export default __webpack_public_path__ + \"static/media/User_icon.8d3c6e34.png\";","import React from \"react\";\nimport styles from \"./users.module.css\";\nimport userPhoto from \"../../assets/images/User_icon.png\";\nimport {UserType} from \"../../Redux/usersReducer\";\nimport {NavLink} from \"react-router-dom\";\n\n\n\nexport type UserPropsType = {\n    user: UserType\n    follow: (userID: number) => void\n    unfollow: (userID: number) => void\n    followingInProgress: Array<number>\n}\n\nfunction User({user, followingInProgress, unfollow, follow }: UserPropsType) {\n\n    return (\n        <div>\n                    <span>\n                        <div>\n                            <NavLink to={'/profile/' + user.id}>\n                            <img src={user.photos.small ? user.photos.small : userPhoto} className={styles.userPhoto}/>\n                            </NavLink>\n                        </div>\n                        <div>\n                            {user.followed\n                                ? <button disabled={followingInProgress.some(id => id === user.id)} onClick={() => {\n                                    unfollow(user.id);\n                                }}>Unfollow</button>\n                                : <button disabled={followingInProgress.some(id => id === user.id)} onClick={() => {\n                                    follow(user.id);\n                                }}>Follow</button>}\n                        </div>\n                    </span>\n                    <span>\n                         <span>\n                             <div>{user.name}</div><div>{user.status}</div>\n                         </span>\n                           <span>\n                             <div>{\"user.location.country\"}</div>\n                               <div>{\"user.location.city\"}</div>\n                         </span>\n                    </span>\n                </div>\n\n\n\n    )\n}\n\nexport default User","import React from \"react\";\nimport {UserType} from \"../../Redux/usersReducer\";\nimport Paginator from \"../common/paginator/Paginators\";\nimport User from \"./User\";\n\n\nexport type UsersPropsType = {\n    totalUsersCount: number\n    pageSize: number\n    currentPage: number\n    onPageChanged: (pageNumber: number) => void\n    users: Array<UserType>\n    follow: (userID: number) => void\n    unfollow: (userID: number) => void\n    followingInProgress: Array<number>\n}\n\nfunction Users(props: UsersPropsType) {\n\n    return (\n        <div>\n            <Paginator totalItemsCount={props.totalUsersCount} pageSize={props.pageSize}\n                       currentPage={props.currentPage} onPageChanged={props.onPageChanged} portionSize = {10}/>\n            {props.users.map(u => <User key={u.id}\n                                        user={u}\n                                        follow={props.follow}\n                                        unfollow={props.unfollow}\n                                        followingInProgress={props.followingInProgress}\n                                        />)}\n\n        </div>\n    )\n}\n\nexport default Users","import {AppStateType} from \"./reduxStore\";\nimport {UserType} from \"./usersReducer\";\nimport {createSelector} from \"reselect\";\n\n\nconst getUsers = (state: AppStateType): Array<UserType> => {\n    return state.usersPage.users\n}\n\nexport const getUsersSelector = createSelector(getUsers,\n    (users: Array<UserType>) =>{\n    return users // here we can do something complex thing, but without changing of dependencies, there aren't rendering\n    })\n\n\n\nexport const getPageSize = (state: AppStateType): number => {\n    return state.usersPage.pageSize\n}\n\nexport const getTotalUsersCount = (state: AppStateType): number => {\n    return state.usersPage.totalUsersCount\n}\nexport const getCurrentPage = (state: AppStateType): number => {\n    return state.usersPage.currentPage\n}\nexport const getIsFetching = (state: AppStateType): boolean => {\n    return state.usersPage.isFetching\n}\nexport const getFollowingInProgress = (state: AppStateType): Array<number> => {\n    return state.usersPage.followingInProgress\n}","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../Redux/reduxStore\";\nimport {\n    setCurrentPage,\n    UserType, toggleFollowingProgress, unfollow, follow, getUsers,\n} from \"../../Redux/usersReducer\";\nimport Users from \"./Users\";\nimport Preloader from \"../common/preloader/Preloader\";\nimport {compose} from \"redux\";\nimport {\n    getCurrentPage,\n    getFollowingInProgress,\n    getIsFetching,\n    getPageSize,\n    getTotalUsersCount, getUsersSelector,\n\n} from \"../../Redux/usersSelector\";\n\n\n\ntype MapStateToPropsType = {\n    users: Array<UserType>\n    pageSize: number\n    totalUsersCount: number\n    currentPage: number\n    isFetching: boolean\n    followingInProgress: Array<number>\n}\ntype MapDispatchToPropsType = {\n    follow: (userID: number) => void\n    unfollow: (userID: number) => void\n    setCurrentPage: (pageNumber: number) => void\n    toggleFollowingProgress: (isFetching: boolean, userID: number) => void\n    getUsers: (currentPage: number, pageSize: number) => any\n}\nexport type UsersAPIComponentPropsType = MapStateToPropsType & MapDispatchToPropsType\n\nclass UsersContainer extends React.Component<UsersAPIComponentPropsType, AppStateType> {\n    // если конструктор только передает управление родительскому классу, то конструктор можно не писать\n    // constructor(props: UsersPropsType) {\n    //     super(props);\n    // }\n\n    componentDidMount() {\n        const {currentPage, pageSize} = this.props\n        this.props.getUsers(currentPage, pageSize);\n\n    }\n\n    onPageChanged = (pageNumber: number) => {\n        const {pageSize} = this.props\n        this.props.getUsers(pageNumber, pageSize);\n\n    }\n\n    render() {\n\n        return (\n            <>\n                {this.props.isFetching ? <Preloader/> : null}\n                <Users\n                    totalUsersCount={this.props.totalUsersCount}\n                    pageSize={this.props.pageSize}\n                    currentPage={this.props.currentPage}\n                    onPageChanged={this.onPageChanged}\n                    users={this.props.users}\n                    follow={this.props.follow}\n                    unfollow={this.props.unfollow}\n                    // toggleFollowingProgress={this.props.toggleFollowingProgress}\n                    followingInProgress={this.props.followingInProgress}\n                />\n            </>\n        )\n    }\n\n}\n\n// let mapStateToProps = (state: AppStateType): MapStateToPropsType => { //state of all application\n//     return {\n//         users: state.usersPage.users,\n//         pageSize: state.usersPage.pageSize,\n//         totalUsersCount: state.usersPage.totalUsersCount,\n//         currentPage: state.usersPage.currentPage,\n//         isFetching: state.usersPage.isFetching,\n//         followingInProgress: state.usersPage.followingInProgress\n//     }\n// }\n\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => { //state of all application\n    return {\n        users: getUsersSelector(state),\n        pageSize: getPageSize(state),\n        totalUsersCount: getTotalUsersCount(state),\n        currentPage: getCurrentPage(state),\n        isFetching: getIsFetching(state),\n        followingInProgress: getFollowingInProgress(state)\n    }\n}\n\n\nexport default compose<React.ComponentType>(\n    // withAuthRedirect,\n    connect(mapStateToProps,\n        {\n            follow,\n            unfollow,\n            setCurrentPage,\n            toggleFollowingProgress,\n            getUsers\n        }\n    )\n)(UsersContainer)","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport s from './Header.module.css';\n\ntype HeaderPropsType = {\n    isAuth: boolean\n    login: string | null\n    logout: () => any\n\n\n}\n\nfunction Header(props: HeaderPropsType) {\n    return (\n        <header className= {s.header}>\n            <img src='https://i.pinimg.com/originals/33/b8/69/33b869f90619e81763dbf1fccc896d8d.jpg'/>\n            <div className={s.loginBlock}>\n                {props.isAuth\n                    ? <div> {props.login} - <button onClick={props.logout}>Log out</button></div>\n                    : <NavLink to={'/login'}>Login</NavLink>}\n            </div>\n        </header>\n    )\n}\nexport default Header;","import React from \"react\";\nimport {AppStateType} from \"../../Redux/reduxStore\";\nimport Header from \"./Header\";\nimport {connect} from \"react-redux\";\nimport {getAuthUserData, logout, setAuthUserData} from \"../../Redux/authReducer\";\n\ntype MapStateToPropsType = {\n    isAuth: boolean\n    login: string | null\n    userId: number | null\n    email: string | null\n}\ntype MapDispatchToPropsType = {\n    // getAuthUserData: (userId: number | null, email: string | null, login:string | null) => any\n    // getAuthUserData: () => any\n    logout: () => any\n}\nexport type HeaderAPIComponentPropsType = MapStateToPropsType & MapDispatchToPropsType\n\n\nclass HeaderContainer extends React.Component<HeaderAPIComponentPropsType, AppStateType> {\n    // componentDidMount() {\n    //     this.props.getAuthUserData(this.props.userId, this.props.email, this.props.login)\n    // }\n\n    render() {\n        return (\n            <Header {...this.props}/>\n        )\n    }}\n\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\n    isAuth: state.auth.isAuth,\n    login: state.auth.login,\n    email: state.auth.email,\n    userId: state.auth.userId\n\n\n})\n\nexport default connect<MapStateToPropsType, MapDispatchToPropsType,{}, AppStateType >\n(mapStateToProps, {logout}) (HeaderContainer);","import React from \"react\";\nimport {reduxForm, Field, InjectedFormProps} from \"redux-form\";\nimport {Input} from \"../common/FormsControls/FormsControl\";\nimport {required} from \"../../utils/validators/validators\";\nimport {connect} from \"react-redux\";\nimport {login} from \"../../Redux/authReducer\";\nimport {Redirect} from \"react-router-dom\";\nimport {AppStateType} from \"../../Redux/reduxStore\";\nimport s from \"../common/FormsControls/FormControls.module.css\"\n\ntype FormDataType = {\n    email: string\n    password: string\n    rememberMe: boolean\n    captcha: null | boolean\n}\ntype MapDispatchToPropsType = {\n    login: (email: string, password: string, rememberMe: boolean, captcha: boolean | null) => any\n}\ntype MapStateToPropsType = {\n    isAuth: boolean\n}\ntype LoginPropsType = MapDispatchToPropsType & MapStateToPropsType\n\nexport const LoginForm: React.FC<InjectedFormProps<FormDataType>> = //деструктуризация props\n    ({handleSubmit, error}) => {\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <div>\n                <Field placeholder={\"e-mail\"} name={\"email\"} component={Input} validate={[required]}/>\n            </div>\n            <div>\n                <Field placeholder={\"password\"} name={\"password\"} component={Input} validate={[required]}\n                       type={\"password\"}/>\n            </div>\n            <div>\n                <Field type={\"checkbox\"} name={\"rememberMe\"} component={Input}/> remember me\n            </div>\n            {error && <div className={s.summaryError}>\n                {error}\n            </div>}\n            <div>\n                <button>sign in</button>\n            </div>\n        </form>\n    )\n}\n\nconst LoginReduxForm = reduxForm<FormDataType>({form: 'login'})(LoginForm)\n\n\nconst Login = (props: LoginPropsType) => {\n    const onSubmit = (formData: FormDataType) => {\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captcha)\n    }\n    if (props.isAuth) {\n        return <Redirect to={'/profile'}/>\n    }\n    return (\n        <div>\n            <h1>LOGIN</h1>\n            <LoginReduxForm onSubmit={onSubmit}/>\n        </div>\n    )\n}\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\n    return {\n        isAuth: state.auth.isAuth\n    }\n\n}\n\nexport default connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppStateType>\n(mapStateToProps, {login})(Login)","import React, {Component, ComponentType} from \"react\";\nimport Preloader from \"../components/common/preloader/Preloader\";\n\n\nexport function withSuspense<T>(Component: ComponentType<T>) {\n    return (props:any) => {\n        return <React.Suspense fallback={<Preloader/>}>\n            <Component {...props}/>\n        </React.Suspense>}\n\n}\n\n","import React, {Suspense} from 'react';\nimport './App.css';\nimport Navbar from \"./components/Navbar/Navbar\";\nimport {BrowserRouter, Route, withRouter} from \"react-router-dom\";\nimport News from \"./components/News/News\";\nimport Settings from \"./components/Settings/Settings\";\nimport Music from \"./components/Music/Music\";\nimport store, {AppStateType} from \"./Redux/reduxStore\";\nimport UsersContainer from \"./components/Users/UsersContainer\";\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\nimport Login from \"./components/Login/Login\";\nimport {connect, Provider} from \"react-redux\";\nimport {compose} from \"redux\";\nimport {initializeApp} from \"./Redux/appReducer\";\nimport Preloader from \"./components/common/preloader/Preloader\";\nimport {withSuspense} from \"./hoc/withSuspense\";\n// import ProfileContainer from \"./components/Profile/ProfileContainer\";\n\nconst DialogsContainer = React.lazy(() => import(\"./components/Dialogs/DialogsContainer\")); //not included in the bundle\nconst ProfileContainer = React.lazy(() => import(\"./components/Profile/ProfileContainer\")); //not included in the bundle\n\n\ntype MapDispatchToPropsType = {\n    initializeApp: () => void\n}\ntype  MapStateToPropsType = {\n    initialized: boolean\n}\n\ntype PropsType = MapDispatchToPropsType & MapStateToPropsType\n\nclass App extends React.Component<PropsType> {\n    componentDidMount() {\n        this.props.initializeApp()\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return <Preloader/>\n        }\n        return (\n            <div className='app-wrapper'>\n                <HeaderContainer/>\n                <Navbar\n                />\n                <div className={'app-wrapper-content'}>\n                    <Route path={'/profile/:userId?'}\n                           render={withSuspense(ProfileContainer)}/>\n                    <Route path={'/dialogs'}\n                           render={withSuspense(DialogsContainer)}/>\n                    <Route path={'/users'}\n                           render={withSuspense(UsersContainer)}/>\n\n                    <Route path={'/login'} render={withSuspense(Login)}/>\n\n                    <Route path={'/news'} render={() => <News/>}/>\n                    <Route path={'/music'} render={() => <Music/>}/>\n                    <Route path={'/settings'} render={() => <Settings/>}/>\n\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\n    initialized: state.app.initialized\n})\n\nconst AppContainer = compose<React.ComponentType>(\n    withRouter,\n    connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppStateType>\n    (mapStateToProps, {initializeApp}))(App)\n\nconst SamuraiJSApp = () => {\n    return (\n        <BrowserRouter>\n            <Provider store={store}>\n                <AppContainer/>\n            </Provider>\n        </BrowserRouter>\n    )\n}\nexport default SamuraiJSApp\n\n\n\n","import React from 'react';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport ReactDOM from \"react-dom\";\nimport SamuraiJSApp from './App';\n\n\n// const rerenderEntireTree = () => {\n\nReactDOM.render(\n    <React.StrictMode>\n        <SamuraiJSApp/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// }\n\n\n// rerenderEntireTree()\n\n// store.subscribe(rerenderEntireTree);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export default __webpack_public_path__ + \"static/media/loader.afa973ee.gif\";","import loader from \"../../../assets/images/loader.gif\";\nimport React from \"react\";\n\ntype PreloaderPropsType = {\n\n}\n\nfunction Preloader(props: PreloaderPropsType) {\n    return (\n        <div>\n            <img src={loader}/>\n        </div>\n    )\n}\n\nexport default Preloader;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControls_formControl__2SPvv\",\"error\":\"FormControls_error__3zfBa\",\"summaryError\":\"FormControls_summaryError__OXK5U\"};","import s from \"./FormControls.module.css\"\n\n\nconst FormControl = ({input, meta, child, ...props}: any) => {\n    const hasError = meta.touched && meta.error\n    return (\n        <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\n            <div>\n                {props.children}\n            </div>\n            {hasError && <span>{meta.error}</span>}\n\n        </div>\n    )\n}\n\n\nexport const Textarea = (props: any) => {\n    const {input, meta, children, ...restProps} = props\n    return (\n        <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\n    )\n}\n\nexport const Input = (props: any) => {\n    const {input, meta, children, ...restProps} = props\n    return (\n        <FormControl {...props}><input {...input} {...restProps}/></FormControl>\n    )\n}\n","export const required = (value: string | undefined) => {\n    if (value) {\n        return undefined\n    }\n    return \"Field is required\"\n}\nexport const maxLengthCreator =(maxLength: number) => (value: string | undefined) => {\n    if (value && value.length > maxLength) {\n        return `Max length is ${maxLength} symbols`\n    }\n    return undefined\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1VCKf\",\"loginBlock\":\"Header_loginBlock__6mma5\"};","import {profileAPI} from \"../api/api\";\nimport {ThunkAction, ThunkDispatch} from \"redux-thunk\";\nimport {AppStateType} from \"./reduxStore\";\n\nconst ADD_POST = 'profile/ADD-POST';\nconst SET_USER_PROFILE = 'profile/SET-USER-PROFILE';\nconst SET_USER_STATUS = 'profile/SET-USER-STATUS';\nconst DELETE_POST = 'profile/DELETE-POST';\n\nexport type InitialStateType = {\n    posts: Array<PostType>\n    newPostText: string\n    profile: null | ProfileUserType\n    status: string\n\n}\nexport type PostType = {\n    id: number\n    message: string\n    likesCount: number\n}\nexport type ProfileUserType = {\n    aboutMe: {\n        aboutMe: null | string\n    }\n    contacts:\n        {\n            facebook: null | string\n            website: null | string\n            vk: null | string\n            twitter: null | string\n            instagram: null | string\n            youtube: null | string\n            github: null | string\n            mainLink: null | string\n        }\n\n    fullName: string\n    lookingForAJob: boolean\n    lookingForAJobDescription: null | string\n    photos: {\n        small: null | string\n        large: null | string\n    }\n    userId: number\n}\n\ntype ActionsTypes =\n    ReturnType<typeof addPostActionCreator> |\n    ReturnType<typeof setUserProfile> |\n    ReturnType<typeof setUserStatus> |\n    ReturnType<typeof deletePost>\n\ntype ThunkType = ThunkAction<void, AppStateType, unknown, ActionsTypes>\n\nconst initialState: InitialStateType = {\n    posts: [\n        {id: 1, message: 'Hi! How are you?', likesCount: 12},\n        {id: 2, message: \"It's my first post\", likesCount: 15},\n    ],\n    newPostText: '',\n    profile: null,\n    status: \"\"\n}\n\n// for this reducer state is state.profilePage, we give here only this part of state\nconst profileReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\n    switch (action.type) {\n        case ADD_POST:\n            const newPost: PostType = {\n                id: 5,\n                message: action.newPostText,\n                likesCount: 0\n            }\n            return {\n                ...state,\n                posts: [...state.posts, newPost],\n                // newPostText: '',\n            };\n\n        case SET_USER_PROFILE: {\n            return {\n                ...state,\n                profile: action.profile\n            };\n        }\n        case SET_USER_STATUS: {\n            return {\n                ...state,\n                status: action.status\n            }\n        }\n        case DELETE_POST: {\n            return {\n                ...state,\n                posts: state.posts.filter(p => p.id !== action.postId)\n            }\n        }\n\n\n        default:\n            return state;\n    }\n}\n\nexport const addPostActionCreator = (newPostText: string) => ({\n    type: ADD_POST,\n    newPostText\n} as const)\nexport const setUserProfile = (profile: ProfileUserType) => ({\n    type: SET_USER_PROFILE,\n    profile\n} as const)\nexport const setUserStatus = (status: string) => ({\n    type: SET_USER_STATUS,\n    status\n} as const)\nexport const deletePost = (postId: number) => ({\n    type: DELETE_POST,\n    postId\n} as const)\n\n\nexport const getUserProfile = (userId: number | null): ThunkType => {\n    return async (dispatch: ThunkDispatch<AppStateType, unknown, ActionsTypes>) => { //thunk\n        const response = await profileAPI.getUserProfile(userId)\n        dispatch(setUserProfile(response))\n    }\n}\n\nexport const getUserStatus = (userId: number | null): ThunkType => {\n    return async (dispatch: ThunkDispatch<AppStateType, unknown, ActionsTypes>) => { //thunk\n        const response = await profileAPI.getUserStatus(userId)\n        dispatch(setUserStatus(response.data))\n    }\n}\n\nexport const updateUserStatus = (status: string): ThunkType => {\n    return async (dispatch: ThunkDispatch<AppStateType, unknown, ActionsTypes>) => {\n        const response = await profileAPI.updateUserStatus(status)\n        if (response.data.resultCode === 0) {\n            dispatch(setUserStatus(status))\n        }\n    }\n}\n\nexport default profileReducer;"],"sourceRoot":""}