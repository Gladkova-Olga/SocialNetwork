{"version":3,"sources":["hoc/withAuthRedirect.tsx","components/Dialogs/Dialogs.module.scss","components/Dialogs/DialogItem/DialogItem.module.scss","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","module","exports","DialogItem","path","id","className","s","dialogsItem","dialogsItemImg","src","avatar","alt","name","dialogsItemName","Message","message","maxLength50","maxLengthCreator","AddMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","messageFormContainer","Field","component","Textarea","placeholder","validate","required","messageField","style","btn","Dialogs","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","formData","onSendMessage","newMessageBody","compose","dispatch","sendMessageCreator"],"mappings":"wNAQMA,EAAkB,SAACC,GACrB,MAAO,CACHC,OAAQD,EAAME,KAAKD,SAIpB,SAASE,EAAoBC,GAUhC,OADiCC,YAAQN,EAARM,EARP,SAACC,GACvB,IAAKL,EAAwBK,EAAxBL,OAAWM,EAAhB,YAA6BD,EAA7B,GACA,OAAKL,EAGE,cAACG,EAAD,eAAeG,IAFX,cAAC,IAAD,CAAUC,GAAK,gB,oBCjBlCC,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,6BAA6B,SAAW,0BAA0B,QAAU,yBAAyB,qBAAuB,sCAAsC,aAAe,gC,oBCApPD,EAAOC,QAAU,CAAC,YAAc,gCAAgC,eAAiB,mCAAmC,gBAAkB,sC,kFCiBvHC,MAZf,SAAoBL,GAChB,IAAIM,EAAO,YAAcN,EAAMO,GAC/B,OACI,sBAAKC,UAAWC,IAAEC,YAAlB,UACI,sBAAMF,UAAWC,IAAEE,eAAnB,SAAmC,qBAAKH,UAAWC,IAAEE,eAAgBC,IAAKZ,EAAMa,OACxCC,IAAKd,EAAMe,SACnD,+BAAM,cAAC,IAAD,CAASb,GAAII,EAAME,UAAWC,IAAEO,gBAAhC,SAAkDhB,EAAMe,a,mCCI3DE,MAXf,SAAiBjB,GACb,OACI,qBAAKQ,UAAWC,IAAES,QAAlB,SACI,8BACKlB,EAAMkB,a,kCCiCvB,IAAMC,EAAcC,YAAiB,IAgBxBC,EAAsBC,YAA+B,CAACC,KAAM,wBAAtCD,EAf6C,SAACtB,GAC7E,OACI,uBAAMwB,SAAUxB,EAAMyB,aAAcjB,UAAWC,IAAEiB,qBAAjD,UACI,8BACI,cAACC,EAAA,EAAD,CAAOZ,KAAM,iBAAkBa,UAAWC,IAAUC,YAAY,qBACzDC,SAAU,CAACC,IAAUb,GAAcX,UAAWC,IAAEwB,iBAG3D,8BACI,wBAAQzB,UAAW0B,IAAMC,IAAzB,0BAODC,EA7Cf,SAAiBpC,GACb,IAAIN,EAAQM,EAAMqC,YAGdC,EAAkB5C,EAAM6C,QAAQC,KAChC,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAuB1B,KAAM0B,EAAE1B,KAAMR,GAAIkC,EAAElC,GAAIM,OAAQ4B,EAAE5B,QAAxC4B,EAAElC,OAGxBmC,EAAmBhD,EAAMiD,SAASH,KAClC,SAAAI,GAAC,OAAI,cAAC,EAAD,CAAoB1B,QAAS0B,EAAE1B,QAASX,GAAIqC,EAAErC,IAAhCqC,EAAErC,OAMzB,OACI,sBAAKC,UAAWC,IAAE8B,QAAlB,UACI,qBAAK/B,UAAWC,IAAEC,YAAlB,SACK4B,IAEL,sBAAK9B,UAAWC,IAAEkC,SAAlB,UACI,8BAAMD,IACN,cAACrB,EAAD,CAAqBG,SAVX,SAACqB,GACnB7C,EAAM8C,cAAcD,EAASE,0B,kCCAtBC,sBACXjD,aAZkB,SAACL,GACnB,MAAO,CACH2C,YAAa3C,EAAM2C,gBAGF,SAACY,GACtB,MAAO,CAEHH,cAAe,SAACC,GAAD,OAA4BE,EAASC,YAAmBH,SAK3ElD,IAFWmD,CAIdZ","file":"static/js/4.7d7217ca.chunk.js","sourcesContent":["import React, {ComponentType} from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../Redux/reduxStore\";\n\ntype mapStateToPropType = {\n    isAuth: boolean\n}\nconst mapStateToProps = (state: AppStateType ): mapStateToPropType => {\n    return {\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\n    const RedirectComponent = (props: mapStateToPropType) => {\n        let {isAuth, ...restProps} = props\n        if (!isAuth) {\n            return <Redirect to={ \"/login\"}/>\n        }\n        return <Component {...restProps as T}/>\n    }\n\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\n    return ConnectedRedirectComponent\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2Gkkf\",\"dialogsItem\":\"Dialogs_dialogsItem__KJPMb\",\"messages\":\"Dialogs_messages__1J3nn\",\"message\":\"Dialogs_message__3-b-X\",\"messageFormContainer\":\"Dialogs_messageFormContainer__3Y-RH\",\"messageField\":\"Dialogs_messageField__34Hfk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogsItem\":\"DialogItem_dialogsItem__2kn-J\",\"dialogsItemImg\":\"DialogItem_dialogsItemImg__fSoo8\",\"dialogsItemName\":\"DialogItem_dialogsItemName__1KcOS\"};","import React from \"react\";\nimport s from \"./DialogItem.module.scss\";\nimport {NavLink} from \"react-router-dom\";\nimport {DialogsType} from \"../../../Redux/dialogsReducer\";\n\n\nfunction DialogItem(props: DialogsType) {\n    let path = '/dialogs/' + props.id;\n    return (\n        <div className={s.dialogsItem}>\n            <span className={s.dialogsItemImg}><img className={s.dialogsItemImg} src={props.avatar}\n                                                    alt={props.name}/></span>\n            <span><NavLink to={path} className={s.dialogsItemName}>{props.name}</NavLink></span>\n\n        </div>\n    )\n}\n\nexport default DialogItem;","import React from \"react\";\nimport s from \"../Dialogs.module.scss\";\nimport {MessageType} from \"../../../Redux/dialogsReducer\";\n\n\nfunction Message(props: MessageType) {\n    return (\n        <div className={s.message}>\n            <div>\n                {props.message}\n            </div>\n        </div>\n    )\n\n}\n\nexport default Message;","import React from \"react\";\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport s from './Dialogs.module.scss';\nimport style from \"../../styles/common/Btn.module.scss\"\nimport Message from \"./Message/Message\";\nimport {DialogsPropsType} from \"./DialogsContainer\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {Textarea} from \"../common/FormsControls/FormsControl\";\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\n\ntype MessageFormDataType = {\n    newMessageBody: string\n}\n\nfunction Dialogs(props: DialogsPropsType) {\n    let state = props.dialogsPage;\n\n\n    let dialogsElements = state.dialogs.map(\n        d => <DialogItem key={d.id} name={d.name} id={d.id} avatar={d.avatar}/>\n    );\n\n    let messagesElements = state.messages.map(\n        m => <Message key={m.id} message={m.message} id={m.id}/>\n    );\n\n    const AddNewMessage = (formData: MessageFormDataType) => {\n        props.onSendMessage(formData.newMessageBody)\n    }\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItem}>\n                {dialogsElements}\n            </div>\n            <div className={s.messages}>\n                <div>{messagesElements}</div>\n                <AddMessageReduxForm onSubmit={AddNewMessage}/>\n            </div>\n        </div>\n    )\n}\n\nconst maxLength50 = maxLengthCreator(50)\nexport const AddMessageForm: React.FC<InjectedFormProps<MessageFormDataType>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit} className={s.messageFormContainer}>\n            <div>\n                <Field name={\"newMessageBody\"} component={Textarea} placeholder='Enter your message'\n                       validate={[required, maxLength50]} className={s.messageField}>\n                </Field>\n            </div>\n            <div>\n                <button className={style.btn}>Send</button>\n            </div>\n        </form>\n    )\n}\n\nexport const AddMessageReduxForm = reduxForm<MessageFormDataType>({form: \"dialogAddMessageForm\"})(AddMessageForm)\nexport default Dialogs;\n\n\n\n","import React from \"react\";\nimport Dialogs from \"./Dialogs\";\nimport {DialogsPageType, sendMessageCreator} from \"../../Redux/dialogsReducer\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../Redux/reduxStore\";\nimport {compose, Dispatch} from \"redux\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\n\ntype MapStateToPropsType = {\n    dialogsPage: DialogsPageType\n}\ntype MapDispatchToPropsType = {\n    onSendMessage: (newMessageBody: string) => void\n}\nexport type DialogsPropsType = MapStateToPropsType & MapDispatchToPropsType\n\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => { //state of all application\n    return {\n        dialogsPage: state.dialogsPage\n    }\n}\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => { //dispatch: Dispatch(from Redux)\n    return {\n\n        onSendMessage: (newMessageBody: string) => dispatch(sendMessageCreator(newMessageBody)),\n    }\n}\nexport default compose<React.ComponentType>(\n    connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppStateType>(mapStateToProps, mapDispatchToProps),\n    withAuthRedirect\n)\n(Dialogs)\n\n"],"sourceRoot":""}