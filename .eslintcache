[{"/Users/lisla/IT-incubator/projects/SocialNetwork/src/index.tsx":"1","/Users/lisla/IT-incubator/projects/SocialNetwork/src/reportWebVitals.ts":"2","/Users/lisla/IT-incubator/projects/SocialNetwork/src/Redux/reduxStore.ts":"3","/Users/lisla/IT-incubator/projects/SocialNetwork/src/App.tsx":"4","/Users/lisla/IT-incubator/projects/SocialNetwork/src/Redux/usersReducer.ts":"5","/Users/lisla/IT-incubator/projects/SocialNetwork/src/Redux/authReducer.ts":"6","/Users/lisla/IT-incubator/projects/SocialNetwork/src/Redux/dialogsReducer.tsx":"7","/Users/lisla/IT-incubator/projects/SocialNetwork/src/Redux/profileReducer.tsx":"8","/Users/lisla/IT-incubator/projects/SocialNetwork/src/Redux/sidebarReducer.tsx":"9","/Users/lisla/IT-incubator/projects/SocialNetwork/src/components/Navbar/Navbar.tsx":"10","/Users/lisla/IT-incubator/projects/SocialNetwork/src/components/News/News.tsx":"11","/Users/lisla/IT-incubator/projects/SocialNetwork/src/components/Settings/Settings.tsx":"12","/Users/lisla/IT-incubator/projects/SocialNetwork/src/components/Music/Music.tsx":"13","/Users/lisla/IT-incubator/projects/SocialNetwork/src/components/Dialogs/DialogsContainer.tsx":"14","/Users/lisla/IT-incubator/projects/SocialNetwork/src/components/Profile/ProfileContainer.tsx":"15","/Users/lisla/IT-incubator/projects/SocialNetwork/src/components/Users/UsersContainer.tsx":"16","/Users/lisla/IT-incubator/projects/SocialNetwork/src/components/Header/HeaderContainer.tsx":"17","/Users/lisla/IT-incubator/projects/SocialNetwork/src/api/api.ts":"18","/Users/lisla/IT-incubator/projects/SocialNetwork/src/components/Profile/Profile.tsx":"19","/Users/lisla/IT-incubator/projects/SocialNetwork/src/components/Dialogs/Dialogs.tsx":"20","/Users/lisla/IT-incubator/projects/SocialNetwork/src/components/Users/Users.tsx":"21","/Users/lisla/IT-incubator/projects/SocialNetwork/src/components/Header/Header.tsx":"22","/Users/lisla/IT-incubator/projects/SocialNetwork/src/components/Dialogs/DialogItem/DialogItem.tsx":"23","/Users/lisla/IT-incubator/projects/SocialNetwork/src/components/common/preloader/Preloader.tsx":"24","/Users/lisla/IT-incubator/projects/SocialNetwork/src/components/Profile/ProfileInfo/ProfileInfo.tsx":"25","/Users/lisla/IT-incubator/projects/SocialNetwork/src/components/Dialogs/Message/Message.tsx":"26","/Users/lisla/IT-incubator/projects/SocialNetwork/src/components/Profile/MyPost/Post/MyPostsContainer.tsx":"27","/Users/lisla/IT-incubator/projects/SocialNetwork/src/components/Profile/MyPost/Post/MyPosts.tsx":"28","/Users/lisla/IT-incubator/projects/SocialNetwork/src/components/Profile/MyPost/Post/Post.tsx":"29","/Users/lisla/IT-incubator/projects/SocialNetwork/src/components/Login/Login.tsx":"30","/Users/lisla/IT-incubator/projects/SocialNetwork/src/hoc/withAuthRedirect.tsx":"31","/Users/lisla/IT-incubator/projects/SocialNetwork/src/components/Profile/ProfileInfo/ProfileStatus.tsx":"32"},{"size":929,"mtime":1621416984877,"results":"33","hashOfConfig":"34"},{"size":425,"mtime":1621416984878,"results":"35","hashOfConfig":"34"},{"size":966,"mtime":1621416984865,"results":"36","hashOfConfig":"34"},{"size":1695,"mtime":1621418776042,"results":"37","hashOfConfig":"34"},{"size":4905,"mtime":1621416984866,"results":"38","hashOfConfig":"34"},{"size":1631,"mtime":1621419596338,"results":"39","hashOfConfig":"34"},{"size":2499,"mtime":1621416984865,"results":"40","hashOfConfig":"34"},{"size":3773,"mtime":1627887672999,"results":"41","hashOfConfig":"34"},{"size":854,"mtime":1621416984865,"results":"42","hashOfConfig":"34"},{"size":1604,"mtime":1621418723253,"results":"43","hashOfConfig":"34"},{"size":180,"mtime":1621416984872,"results":"44","hashOfConfig":"34"},{"size":158,"mtime":1621416984876,"results":"45","hashOfConfig":"34"},{"size":184,"mtime":1621416984871,"results":"46","hashOfConfig":"34"},{"size":1474,"mtime":1627547231454,"results":"47","hashOfConfig":"34"},{"size":1874,"mtime":1627890844670,"results":"48","hashOfConfig":"34"},{"size":3741,"mtime":1627551539526,"results":"49","hashOfConfig":"34"},{"size":1711,"mtime":1621416984871,"results":"50","hashOfConfig":"34"},{"size":1227,"mtime":1627561330738,"results":"51","hashOfConfig":"34"},{"size":622,"mtime":1627888069845,"results":"52","hashOfConfig":"34"},{"size":1575,"mtime":1621416984869,"results":"53","hashOfConfig":"34"},{"size":2543,"mtime":1621416984876,"results":"54","hashOfConfig":"34"},{"size":670,"mtime":1621416984870,"results":"55","hashOfConfig":"34"},{"size":567,"mtime":1621416984869,"results":"56","hashOfConfig":"34"},{"size":272,"mtime":1621416984877,"results":"57","hashOfConfig":"34"},{"size":1064,"mtime":1627889252793,"results":"58","hashOfConfig":"34"},{"size":657,"mtime":1621416984870,"results":"59","hashOfConfig":"34"},{"size":1133,"mtime":1621416984873,"results":"60","hashOfConfig":"34"},{"size":1199,"mtime":1621416984873,"results":"61","hashOfConfig":"34"},{"size":508,"mtime":1621416984874,"results":"62","hashOfConfig":"34"},{"size":563,"mtime":1627898153488,"results":"63","hashOfConfig":"34"},{"size":782,"mtime":1621418639014,"results":"64","hashOfConfig":"34"},{"size":1591,"mtime":1627896617686,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"1sw913o",{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"68"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"68"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"68"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"68"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"68"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"68"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"68"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"68"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"68"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"68"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"68"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"68"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"68"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"68"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"68"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"68"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/lisla/IT-incubator/projects/SocialNetwork/src/index.tsx",[],["147","148"],"/Users/lisla/IT-incubator/projects/SocialNetwork/src/reportWebVitals.ts",[],"/Users/lisla/IT-incubator/projects/SocialNetwork/src/Redux/reduxStore.ts",[],"/Users/lisla/IT-incubator/projects/SocialNetwork/src/App.tsx",[],"/Users/lisla/IT-incubator/projects/SocialNetwork/src/Redux/usersReducer.ts",[],"/Users/lisla/IT-incubator/projects/SocialNetwork/src/Redux/authReducer.ts",["149","150","151","152","153","154"],"import {toggleFollowingProgress, unfollowSuccess, UsersPageType} from \"./usersReducer\";\nimport {PostType} from \"./profileReducer\";\nimport {Dispatch} from \"redux\";\nimport {authAPI, usersAPI} from \"../api/api\";\nimport {ThunkAction, ThunkDispatch} from \"redux-thunk\";\nimport {AppStateType} from \"./reduxStore\";\n\n\nconst SET_USER_DATA = 'SET_USER_DATA';\n\ntype ActionsType = ReturnType<typeof setAuthUserData>\n\ntype InitialStateType = {\n    userId: null | number\n    email: null | string\n    login: null | string\n    isAuth: boolean\n}\ntype ThunkType = ThunkAction<void, AppStateType, unknown, ActionsType>\n\nlet initialState: InitialStateType= {\n    userId: null,\n    email: null,\n    login: null,\n    isAuth: false\n};\n\nexport const authReducer = (state:InitialStateType = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case SET_USER_DATA:\n            return {\n                ...state,\n                ...action.data,\n                isAuth: true\n            };\n\n        default:\n            return state;\n    }\n}\n\nexport const setAuthUserData = (userId: number | null, email: string | null , login:string | null) =>\n    ({type: SET_USER_DATA, data: {userId, email, login}} as const)\n\nexport const getAuthUserData = (): ThunkType => {\n    return     (dispatch: ThunkDispatch<AppStateType, unknown, ActionsType>) => {\n        authAPI.authMe()\n            .then(data => {\n                if(data.resultCode === 0) {\n                    let {userId, email, login} = data.data;\n                    dispatch(setAuthUserData(userId, email, login)) ;\n                }\n            })\n    }\n\n}\n\n\n\n\n\n","/Users/lisla/IT-incubator/projects/SocialNetwork/src/Redux/dialogsReducer.tsx",["155"],"\n\nconst UPDATE_NEW_MESSAGE_BODY = 'UPDATE-NEW-MESSAGE-BODY';\nconst SEND_MESSAGE = 'SEND-MESSAGE';\n\ntype ActionsTypes =\n    ReturnType<typeof updateNewMessageBodyCreator>\n    | ReturnType<typeof sendMessageCreator>\n\nexport type DialogsPageType = {\n    messages: Array<MessageType>\n    dialogs: Array<DialogsType>\n    newMessageBody: string\n}\nexport type DialogsType = {\n    name: string\n    id: number\n    avatar: string\n}\nexport type MessageType = {\n    id: number\n    message: string}\n\nconst initialState: DialogsPageType = {\n        messages: [\n            {id: 1, message: 'Hi!'},\n            {id: 2, message: 'How are you?'},\n            {id: 3, message: 'Yo!'},\n        ],\n        newMessageBody: '',\n        dialogs: [\n            {id: 1, name: 'Lisa', avatar: 'https://pets2.me/media/res/1/3/1/9/2/13192.ozimro.300.jpg'},\n            {\n                id: 2,\n                name: 'Bob',\n                avatar: 'https://cs4.pikabu.ru/post_img/big/2015/06/27/6/1435397110_577794048.png'\n            },\n            {id: 3, name: 'Jane', avatar: 'https://sun9-14.userapi.com/c698/u89838553/113490960/x_ff0ef64c.jpg'},\n            {\n                id: 4,\n                name: 'Mary',\n                avatar: 'https://images11.esquire.ru/upload/custom/c41/c41ba98ac9188061e2b0952cdcab9b71.jpg'\n            },\n            {id: 5, name: 'Jack', avatar: 'https://img.gazeta.ru/files3/837/5731837/bat-pic668-668x444-36724.jpg'},\n        ],\n    };\n\n// for this reducer state is state.dialogsPage, we give here only this part of state.\n// It's important to give a type oe return of function\nconst dialogsReducer = (state:DialogsPageType = initialState, action: ActionsTypes): DialogsPageType => {\n    let stateCopy = {\n        ...state,\n        messages:  [...state.messages]\n    };\n\n    switch (action.type) {\n        case UPDATE_NEW_MESSAGE_BODY:\n            return {\n                ...state,\n                newMessageBody: action.body\n            };\n\n        case SEND_MESSAGE: {\n            let body = state.newMessageBody\n            return {\n                ...state,\n                messages:  [...state.messages, {id: 6, message: body}],\n                newMessageBody:  ''\n            };\n        }\n\n        default:\n            return state;\n    }\n\n\n}\n\nexport const updateNewMessageBodyCreator = (body: string) => ({\n    type: UPDATE_NEW_MESSAGE_BODY,\n    body: body\n}) as const\nexport const sendMessageCreator = () => ({\n    type: SEND_MESSAGE,\n}) as const\n\nexport default dialogsReducer;","/Users/lisla/IT-incubator/projects/SocialNetwork/src/Redux/profileReducer.tsx",["156","157","158","159"],"import {Dispatch} from \"redux\";\nimport {profileAPI, usersAPI} from \"../api/api\";\nimport {toggleFollowingProgress, unfollowSuccess} from \"./usersReducer\";\nimport {ThunkAction, ThunkDispatch} from \"redux-thunk\";\nimport {AppStateType} from \"./reduxStore\";\n\nconst ADD_POST = 'ADD-POST';\nconst UPDATE_NEW_POST_TEXT = 'UPDATE-NEW-POST-TEXT';\nconst SET_USER_PROFILE = 'SET-USER-PROFILE';\nconst SET_USER_STATUS = 'SET-USER-STATUS'\n\nexport type InitialStateType = {\n    posts: Array<PostType>\n    newPostText: string\n    profile: null | ProfileUserType\n    status: string\n\n}\nexport type PostType = {\n    id: number\n    message: string\n    likesCount: number\n}\nexport type ProfileUserType = {\n    aboutMe: string\n    fullName: string\n    userID: number\n    photos: {\n        small: string | null\n        large: string | null\n    }\n}\n\n\ntype ActionsTypes =\n    ReturnType<typeof addPostActionCreator> |\n    ReturnType<typeof updateNewPostTextActionCreator> |\n    ReturnType<typeof setUserProfile> |\n    ReturnType<typeof setUserStatus>\n\ntype ThunkType = ThunkAction<void, AppStateType, unknown, ActionsTypes>\n\nconst initialState: InitialStateType = {\n    posts: [\n        {id: 1, message: 'Hi! How are you?', likesCount: 12},\n        {id: 2, message: \"It's my first post\", likesCount: 15},\n    ],\n    newPostText: '',\n    profile: null,\n    status: \"\"\n}\n\n// for this reducer state is state.profilePage, we give here only this part of state\nconst profileReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\n    switch (action.type) {\n        case ADD_POST:\n            const newPost: PostType = {\n                id: 5,\n                message: action.newPostText,\n                likesCount: 0\n            }\n            return {\n                ...state,\n                posts: [...state.posts, newPost],\n                newPostText: '',\n            };\n\n        case UPDATE_NEW_POST_TEXT: {\n            return {\n                ...state,\n                newPostText: action.newText\n            };\n        }\n        case SET_USER_PROFILE: {\n            return {\n                ...state,\n                profile: action.profile\n            };\n        }\n        case SET_USER_STATUS: {\n            return {\n                ...state,\n                status: action.status\n            }\n        }\n\n\n        default:\n            return state;\n    }\n}\n\nexport const addPostActionCreator = (newPostText: string) => ({\n    type: ADD_POST,\n    newPostText\n} as const)\nexport const updateNewPostTextActionCreator = (newText: string) => ({\n    type: UPDATE_NEW_POST_TEXT,\n    newText\n} as const)\nexport const setUserProfile = (profile: ProfileUserType) => ({\n    type: SET_USER_PROFILE,\n    profile\n} as const)\nexport const setUserStatus = (status: string) => ({\n    type: SET_USER_STATUS,\n    status\n} as const)\n\nexport const getUserProfile = (userId: number): ThunkType => {\n    return (dispatch: ThunkDispatch<AppStateType, unknown, ActionsTypes>) => { //thunk\n        profileAPI.getUserProfile(userId)\n            .then(data => {\n                dispatch(setUserProfile(data))\n            })\n    }\n}\n\nexport const getUserStatus = (userId: number): ThunkType => {\n    return (dispatch: ThunkDispatch<AppStateType, unknown, ActionsTypes>) => { //thunk\n        profileAPI.getUserStatus(userId)\n            .then(response => {\n                dispatch(setUserStatus(response.data))\n            })\n    }\n}\nexport const updateUserStatus = (status: string): ThunkType => {\n    return (dispatch: ThunkDispatch<AppStateType, unknown, ActionsTypes>) =>\n    profileAPI.updateUserStatus(status)\n        .then(response => {\n            if (response.data.resultCode === 0) {\n                dispatch(setUserStatus(status))\n            }\n        })\n}\n\nexport default profileReducer;","/Users/lisla/IT-incubator/projects/SocialNetwork/src/Redux/sidebarReducer.tsx",["160","161","162","163"],"\nimport {DialogsType, sendMessageCreator, updateNewMessageBodyCreator} from \"./dialogsReducer\";\nimport {addPostActionCreator, updateNewPostTextActionCreator} from \"./profileReducer\";\n\nexport type SidebarType = {\n    friends: Array<DialogsType>\n}\ntype ActionsTypes = any\n\n\nconst initialState: SidebarType = {\n    friends: [\n        {id: 1, name: 'Lisa', avatar: 'https://pets2.me/media/res/1/3/1/9/2/13192.ozimro.300.jpg'},\n        {\n            id: 2,\n            name: 'Bob',\n            avatar: 'https://cs4.pikabu.ru/post_img/big/2015/06/27/6/1435397110_577794048.png'\n        },\n        {id: 3, name: 'Jane', avatar: 'https://sun9-14.userapi.com/c698/u89838553/113490960/x_ff0ef64c.jpg'},\n    ]\n\n};\n\nconst sidebarReducer= (state: SidebarType = initialState, action: ActionsTypes): SidebarType => {\n\n    return state;\n}\n\nexport default sidebarReducer;","/Users/lisla/IT-incubator/projects/SocialNetwork/src/components/Navbar/Navbar.tsx",["164","165"],"import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport s from './Navbar.module.css';\nimport DialogItem from \"../Dialogs/DialogItem/DialogItem\";\nimport {DialogsType} from \"../../Redux/dialogsReducer\";\n\n\ntype NavbarType = {\n    // state: Array<DialogsType>\n}\n\nfunction Navbar(props: NavbarType) {\n    // let friendsElements = props.state.map(\n    //     d => <DialogItem name={d.name} id={d.id} avatar={d.avatar}/>\n    // );\n    return (\n        <nav className = {s.nav}>\n            <div className = {`${s.item}`}>\n                <NavLink to=\"/profile\" activeClassName ={s.activeLink}>Profile</NavLink>\n            </div>\n            <div className = {s.item}>\n                <NavLink  to=\"/dialogs\" activeClassName={s.activeLink}>Messages</NavLink>\n            </div>\n            <div className = {s.item}>\n                <NavLink  to=\"/users\" activeClassName={s.activeLink}>Users</NavLink>\n            </div>\n            <div className = {s.item}>\n                <NavLink  to={\"/news\"} activeClassName={s.activeLink}>News</NavLink>\n            </div>\n            <div className = {s.item}>\n                <NavLink to={\"/music\"} activeClassName={s.activeLink}>Music</NavLink>\n            </div>\n            <div className = {s.item}>\n                <NavLink to={\"/settings\"} activeClassName={s.activeLink}>Settings</NavLink>\n            </div>\n\n            {/*<div className={s.item}>*/}\n            {/*    <h3>Friends</h3>*/}\n            {/*    {friendsElements}*/}\n\n            {/*</div>*/}\n        </nav>\n    )\n}\n//console.log(s); show what in s\n\nexport default Navbar;\n\n\n","/Users/lisla/IT-incubator/projects/SocialNetwork/src/components/News/News.tsx",["166"],"import React from \"react\";\nimport s from './News.module.css'\n\n\nfunction News(props: any) {\n    return (\n        <div>\n            News\n        </div>\n    )\n}\n\nexport default News;\n","/Users/lisla/IT-incubator/projects/SocialNetwork/src/components/Settings/Settings.tsx",[],"/Users/lisla/IT-incubator/projects/SocialNetwork/src/components/Music/Music.tsx",["167"],"import React from \"react\";\nimport s from './Music.module.css'\n\n\nfunction Music(props: any) {\n    return (\n        <div>\n            Music\n        </div>\n    )\n}\n\nexport default Music;\n","/Users/lisla/IT-incubator/projects/SocialNetwork/src/components/Dialogs/DialogsContainer.tsx",[],"/Users/lisla/IT-incubator/projects/SocialNetwork/src/components/Profile/ProfileContainer.tsx",[],"/Users/lisla/IT-incubator/projects/SocialNetwork/src/components/Users/UsersContainer.tsx",["168"],"import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../Redux/reduxStore\";\nimport {\n    setCurrentPage,\n    UserType, toggleFollowingProgress, getUsers, unfollow, follow\n} from \"../../Redux/usersReducer\";\nimport Users from \"./Users\";\nimport Preloader from \"../common/preloader/Preloader\";\nimport {compose} from \"redux\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\n\n\ntype MapStateToPropsType = {\n    users: Array<UserType>\n    pageSize: number\n    totalUsersCount: number\n    currentPage: number\n    isFetching: boolean\n    followingInProgress: Array<number>\n}\ntype MapDispatchToPropsType = {\n    follow: (userID: number) => void\n    unfollow: (userID: number) => void\n    // setUsers: (users: any) => void\n    setCurrentPage: (pageNumber: number) => void\n    // setTotalUsersCount: (totalCount: number) => void\n    // toggleIsFetching: (isFetching: boolean) => void\n    toggleFollowingProgress: (isFetching: boolean, userID: number) => void\n    getUsers: (currentPage: number, pageSize: number) => any\n}\nexport type UsersAPIComponentPropsType = MapStateToPropsType & MapDispatchToPropsType\n\nclass UsersContainer extends React.Component<UsersAPIComponentPropsType, AppStateType> {\n    // если конструктор только передает управление родительскому классу, то конструктор можно не писать\n    // constructor(props: UsersPropsType) {\n    //     super(props);\n    // }\n\n    componentDidMount() {\n        this.props.getUsers(this.props.currentPage, this.props.pageSize);\n        // this.props.toggleIsFetching(true);\n        // usersAPI.getUsers(this.props.currentPage, this.props.pageSize).then(data=> {\n        //     this.props.toggleIsFetching(false)\n        //     this.props.setUsers(data.items)\n        //     this.props.setTotalUsersCount(data.totalCount)\n        //\n        // })\n\n    }\n\n    onPageChanged = (pageNumber: number) => {\n        this.props.getUsers(pageNumber, this.props.pageSize);\n\n        // this.props.setCurrentPage(pageNumber);\n        // this.props.toggleIsFetching(true)\n        // usersAPI.getUsers(pageNumber, this.props.pageSize).then(data => {\n        //     this.props.toggleIsFetching(false)\n        //     this.props.setUsers(data.items)\n        // });\n    }\n\n    render() {\n\n        return (\n            <>\n                {this.props.isFetching ? <Preloader/> : null}\n                <Users\n                    totalUsersCount={this.props.totalUsersCount}\n                    pageSize={this.props.pageSize}\n                    currentPage={this.props.currentPage}\n                    onPageChanged={this.onPageChanged}\n                    users={this.props.users}\n                    follow={this.props.follow}\n                    unfollow={this.props.unfollow}\n                    // toggleFollowingProgress={this.props.toggleFollowingProgress}\n                    followingInProgress={this.props.followingInProgress}\n                />\n            </>\n        )\n    }\n\n}\n\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => { //state of all application\n    return {\n        users: state.usersPage.users,\n        pageSize: state.usersPage.pageSize,\n        totalUsersCount: state.usersPage.totalUsersCount,\n        currentPage: state.usersPage.currentPage,\n        isFetching: state.usersPage.isFetching,\n        followingInProgress: state.usersPage.followingInProgress\n    }\n}\n\n\nexport default compose<React.ComponentType>(\n    // withAuthRedirect,\n    connect(mapStateToProps,\n        {\n            follow,\n            unfollow,\n            setCurrentPage,\n            toggleFollowingProgress,\n            getUsers\n        }\n    )\n)(UsersContainer)","/Users/lisla/IT-incubator/projects/SocialNetwork/src/components/Header/HeaderContainer.tsx",["169"],"import React from \"react\";\nimport {AppStateType} from \"../../Redux/reduxStore\";\nimport Header from \"./Header\";\nimport {connect} from \"react-redux\";\nimport {getAuthUserData, setAuthUserData} from \"../../Redux/authReducer\";\n\ntype MapStateToPropsType = {\n    isAuth: boolean\n    login: string | null\n    userId: number | null\n    email: string | null\n}\ntype MapDispatchToPropsType = {\n    // setAuthUserData: (userId: number | null, email: string | null, login:string | null) => void\n    getAuthUserData: (userId: number | null, email: string | null, login:string | null) => any\n}\nexport type HeaderAPIComponentPropsType = MapStateToPropsType & MapDispatchToPropsType\n\n\nclass HeaderContainer extends React.Component<HeaderAPIComponentPropsType, AppStateType> {\n    componentDidMount() {\n        this.props.getAuthUserData(this.props.userId, this.props.email, this.props.login)\n        // authAPI.authMe()\n        // axios.get(`https://social-network.samuraijs.com/api/1.0/auth/me`, {\n        //     withCredentials: true\n        // })\n        //     .then(data => {\n        //         if(data.resultCode === 0) {\n        //             let {id, email, login} = data.data;\n        //             this.props.setAuthUserData(id, email, login);\n        //         }\n        //     })\n    }\n\n    render() {\n        return (\n            <Header {...this.props}/>\n        )\n    }}\n\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\n    isAuth: state.auth.isAuth,\n    login: state.auth.login,\n    email: state.auth.email,\n    userId: state.auth.userId\n\n\n})\n\nexport default connect<MapStateToPropsType, MapDispatchToPropsType,{}, AppStateType >\n(mapStateToProps, {getAuthUserData}) (HeaderContainer);","/Users/lisla/IT-incubator/projects/SocialNetwork/src/api/api.ts",[],"/Users/lisla/IT-incubator/projects/SocialNetwork/src/components/Profile/Profile.tsx",[],"/Users/lisla/IT-incubator/projects/SocialNetwork/src/components/Dialogs/Dialogs.tsx",[],"/Users/lisla/IT-incubator/projects/SocialNetwork/src/components/Users/Users.tsx",["170","171"],"import React from \"react\";\nimport styles from \"./users.module.css\";\nimport userPhoto from \"../../assets/images/User_icon.png\";\nimport {UserType} from \"../../Redux/usersReducer\";\nimport {NavLink} from \"react-router-dom\";\nimport {usersAPI} from \"../../api/api\";\n\n\ntype UsersPropsType = {\n    totalUsersCount: number\n    pageSize: number\n    currentPage: number\n    onPageChanged: (pageNumber: number) => void\n    users: Array<UserType>\n    follow: (userID: number) => void\n    unfollow: (userID: number) => void\n    followingInProgress: Array<number>\n}\n\nfunction Users(props: UsersPropsType) {\n    const pagesCount = Math.ceil(props.totalUsersCount / props.pageSize);\n    const pages = [];\n    for (let i = 1; i <= pagesCount; i++) {\n        pages.push(i);\n    }\n    return (\n        <div>\n            <div>\n                {pages.map(p => {\n                    return (\n                        <span className={(p === props.currentPage) ? styles.selectedPage : ''}\n                              onClick={() => {\n                                  props.onPageChanged(p)\n                              }}\n                        > {p}</span>\n                    )\n                })}\n\n            </div>\n            {props.users.map(u => <div key={u.id}>\n                    <span>\n                        <div>\n                            <NavLink to={'/profile/' + u.id}>\n                            <img src={u.photos.small ? u.photos.small : userPhoto} className={styles.userPhoto}/>\n                            </NavLink>\n                        </div>\n                        <div>\n                            {u.followed\n                                ? <button disabled={props.followingInProgress.some(id => id === u.id)} onClick={() =>\n                                {props.unfollow(u.id);}}>Unfollow</button>\n                                : <button disabled={props.followingInProgress.some(id => id === u.id)} onClick={() =>\n                                {props.follow(u.id);}}>Follow</button>}\n                        </div>\n                    </span>\n                    <span>\n                         <span>\n                             <div>{u.name}</div><div>{u.status}</div>\n                         </span>\n                           <span>\n                             <div>{\"u.location.country\"}</div>\n                               <div>{\"u.location.city\"}</div>\n                         </span>\n                    </span>\n                </div>\n            )\n            }\n        </div>\n    )\n}\n\nexport default Users","/Users/lisla/IT-incubator/projects/SocialNetwork/src/components/Header/Header.tsx",["172"],"import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport s from './Header.module.css';\n\ntype HeaderPropsType = {\n    isAuth: boolean\n    login: string | null\n    // setAuthUserData: (userId: number, email: string, login:string) => void\n\n\n}\n\nfunction Header(props: HeaderPropsType) {\n    return (\n        <header className= {s.header}>\n            <img src='https://i.pinimg.com/originals/33/b8/69/33b869f90619e81763dbf1fccc896d8d.jpg'/>\n            <div className={s.loginBlock}>\n                {props.isAuth ? props.login :\n                <NavLink to={'/login'}>Login</NavLink>}\n            </div>\n        </header>\n    )\n}\nexport default Header;","/Users/lisla/IT-incubator/projects/SocialNetwork/src/components/Dialogs/DialogItem/DialogItem.tsx",[],"/Users/lisla/IT-incubator/projects/SocialNetwork/src/components/common/preloader/Preloader.tsx",["173"],"import loader from \"../../../assets/images/loader.gif\";\nimport React from \"react\";\n\ntype PreloaderPropsType = {\n\n}\n\nfunction Preloader(props: PreloaderPropsType) {\n    return (\n        <div>\n            <img src={loader}/>\n        </div>\n    )\n}\n\nexport default Preloader;","/Users/lisla/IT-incubator/projects/SocialNetwork/src/components/Profile/ProfileInfo/ProfileInfo.tsx",["174"],"import React from \"react\";\nimport s from './ProfileInfo.module.css';\nimport Preloader from \"../../common/preloader/Preloader\";\nimport {ProfileUserType} from \"../../../Redux/profileReducer\";\nimport ProfileStatus from \"./ProfileStatus\";\ntype PropsType = {\n    profile: null | ProfileUserType\n    status: string\n    updateUserStatus: (status: string) => any\n}\nfunction ProfileInfo(props: PropsType) {\n    if (!props.profile) {\n        return <Preloader/>\n    }\n    return (\n        <div>\n            {/*<div>*/}\n            {/*    <img*/}\n            {/*        src='https://kids.sandiegozoo.org/sites/default/files/2019-01/animal-hero-arcticfoxe.jpg'/>*/}\n            {/*</div>*/}\n            <div className={s.descriptionBlock}>\n                <img src={props.profile.photos.large ? props.profile.photos.large: ''}/>\n                {props.profile.fullName}\n                {props.profile.aboutMe}\n                <ProfileStatus status={props.status} updateUserStatus={props.updateUserStatus}/>\n            </div>\n        </div>\n    )\n}\nexport default ProfileInfo;","/Users/lisla/IT-incubator/projects/SocialNetwork/src/components/Dialogs/Message/Message.tsx",["175","176"],"import React from \"react\";\nimport s from \"../Dialogs.module.css\";\nimport {MessageType} from \"../../../Redux/dialogsReducer\";\n\n\nfunction Message(props: MessageType) {\n    let newMessageElement = React.createRef<HTMLTextAreaElement>();\n    let addMessage = () => {\n       let text =  newMessageElement.current?.value;\n    }\n    return (\n\n        <div className={s.message}>\n            <div>\n                {props.message}\n            </div>\n            {/*<div>*/}\n            {/*<textarea ref = {addMessage}></textarea>*/}\n            {/*<button onClick={addMessage}>Add</button>*/}\n            {/*</div>*/}\n        </div>\n    )\n\n}\n\nexport default Message;","/Users/lisla/IT-incubator/projects/SocialNetwork/src/components/Profile/MyPost/Post/MyPostsContainer.tsx",["177"],"import React from \"react\";\n\nimport {addPostActionCreator, PostType,\n    updateNewPostTextActionCreator\n} from \"../../../../Redux/profileReducer\";\nimport MyPosts from \"./MyPosts\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../../../Redux/reduxStore\";\nimport {Dispatch} from \"redux\";\n\ntype MapStateToPropsType = {\n    posts: Array<PostType>\n    newPostText: string\n\n}\ntype MapDispatchToPropsType = {\n    updateNewPostText: (newText: string) => void\n    addPost: (newText: string) => void\n}\n\n\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType  => ({\n    newPostText: state.profilePage.newPostText,\n    posts: state.profilePage.posts\n})\n\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => ({\n    updateNewPostText: (newText: string) => {\n        dispatch(updateNewPostTextActionCreator(newText));\n    },\n    addPost: (newText: string) => {\n        dispatch(addPostActionCreator(newText));\n    }\n})\n\nconst MyPostsContainer = connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppStateType>(mapStateToProps, mapDispatchToProps)(MyPosts);\n\nexport default MyPostsContainer;","/Users/lisla/IT-incubator/projects/SocialNetwork/src/components/Profile/MyPost/Post/MyPosts.tsx",[],"/Users/lisla/IT-incubator/projects/SocialNetwork/src/components/Profile/MyPost/Post/Post.tsx",["178"],"import React from \"react\";\nimport s from './Post.module.css';\nimport {PostType} from \"../../../../Redux/profileReducer\";\n\n\n\nfunction Post(props: PostType) {\n    return (\n        <div className={s.item}>\n            <img\n                src='https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTCgPWBtcWfGpFd3n6ma11amy6vQwYYZ8oj9A&usqp=CAU'/>\n            {props.message}\n            <div>\n                <span>like </span> {props.likesCount}\n            </div>\n\n        </div>\n    )\n}\n\nexport default Post;","/Users/lisla/IT-incubator/projects/SocialNetwork/src/components/Login/Login.tsx",[],"/Users/lisla/IT-incubator/projects/SocialNetwork/src/hoc/withAuthRedirect.tsx",[],"/Users/lisla/IT-incubator/projects/SocialNetwork/src/components/Profile/ProfileInfo/ProfileStatus.tsx",["179","180"],{"ruleId":"181","replacedBy":"182"},{"ruleId":"183","replacedBy":"184"},{"ruleId":"185","severity":1,"message":"186","line":1,"column":9,"nodeType":"187","messageId":"188","endLine":1,"endColumn":32},{"ruleId":"185","severity":1,"message":"189","line":1,"column":34,"nodeType":"187","messageId":"188","endLine":1,"endColumn":49},{"ruleId":"185","severity":1,"message":"190","line":1,"column":51,"nodeType":"187","messageId":"188","endLine":1,"endColumn":64},{"ruleId":"185","severity":1,"message":"191","line":2,"column":9,"nodeType":"187","messageId":"188","endLine":2,"endColumn":17},{"ruleId":"185","severity":1,"message":"192","line":3,"column":9,"nodeType":"187","messageId":"188","endLine":3,"endColumn":17},{"ruleId":"185","severity":1,"message":"193","line":4,"column":18,"nodeType":"187","messageId":"188","endLine":4,"endColumn":26},{"ruleId":"185","severity":1,"message":"194","line":51,"column":9,"nodeType":"187","messageId":"188","endLine":51,"endColumn":18},{"ruleId":"185","severity":1,"message":"192","line":1,"column":9,"nodeType":"187","messageId":"188","endLine":1,"endColumn":17},{"ruleId":"185","severity":1,"message":"193","line":2,"column":21,"nodeType":"187","messageId":"188","endLine":2,"endColumn":29},{"ruleId":"185","severity":1,"message":"186","line":3,"column":9,"nodeType":"187","messageId":"188","endLine":3,"endColumn":32},{"ruleId":"185","severity":1,"message":"189","line":3,"column":34,"nodeType":"187","messageId":"188","endLine":3,"endColumn":49},{"ruleId":"185","severity":1,"message":"195","line":2,"column":22,"nodeType":"187","messageId":"188","endLine":2,"endColumn":40},{"ruleId":"185","severity":1,"message":"196","line":2,"column":42,"nodeType":"187","messageId":"188","endLine":2,"endColumn":69},{"ruleId":"185","severity":1,"message":"197","line":3,"column":9,"nodeType":"187","messageId":"188","endLine":3,"endColumn":29},{"ruleId":"185","severity":1,"message":"198","line":3,"column":31,"nodeType":"187","messageId":"188","endLine":3,"endColumn":61},{"ruleId":"185","severity":1,"message":"199","line":4,"column":8,"nodeType":"187","messageId":"188","endLine":4,"endColumn":18},{"ruleId":"185","severity":1,"message":"200","line":5,"column":9,"nodeType":"187","messageId":"188","endLine":5,"endColumn":20},{"ruleId":"185","severity":1,"message":"201","line":2,"column":8,"nodeType":"187","messageId":"188","endLine":2,"endColumn":9},{"ruleId":"185","severity":1,"message":"201","line":2,"column":8,"nodeType":"187","messageId":"188","endLine":2,"endColumn":9},{"ruleId":"185","severity":1,"message":"202","line":11,"column":9,"nodeType":"187","messageId":"188","endLine":11,"endColumn":25},{"ruleId":"185","severity":1,"message":"203","line":5,"column":26,"nodeType":"187","messageId":"188","endLine":5,"endColumn":41},{"ruleId":"185","severity":1,"message":"193","line":6,"column":9,"nodeType":"187","messageId":"188","endLine":6,"endColumn":17},{"ruleId":"204","severity":1,"message":"205","line":44,"column":29,"nodeType":"206","endLine":44,"endColumn":114},{"ruleId":"204","severity":1,"message":"205","line":16,"column":13,"nodeType":"206","endLine":16,"endColumn":102},{"ruleId":"204","severity":1,"message":"205","line":11,"column":13,"nodeType":"206","endLine":11,"endColumn":32},{"ruleId":"204","severity":1,"message":"205","line":22,"column":17,"nodeType":"206","endLine":22,"endColumn":89},{"ruleId":"185","severity":1,"message":"207","line":8,"column":9,"nodeType":"187","messageId":"188","endLine":8,"endColumn":19},{"ruleId":"185","severity":1,"message":"208","line":9,"column":12,"nodeType":"187","messageId":"188","endLine":9,"endColumn":16},{"ruleId":"185","severity":1,"message":"209","line":1,"column":8,"nodeType":"187","messageId":"188","endLine":1,"endColumn":13},{"ruleId":"204","severity":1,"message":"205","line":10,"column":13,"nodeType":"206","endLine":11,"endColumn":124},{"ruleId":"185","severity":1,"message":"201","line":2,"column":8,"nodeType":"187","messageId":"188","endLine":2,"endColumn":9},{"ruleId":"185","severity":1,"message":"210","line":3,"column":9,"nodeType":"187","messageId":"188","endLine":3,"endColumn":22},"no-native-reassign",["211"],"no-negated-in-lhs",["212"],"@typescript-eslint/no-unused-vars","'toggleFollowingProgress' is defined but never used.","Identifier","unusedVar","'unfollowSuccess' is defined but never used.","'UsersPageType' is defined but never used.","'PostType' is defined but never used.","'Dispatch' is defined but never used.","'usersAPI' is defined but never used.","'stateCopy' is assigned a value but never used.","'sendMessageCreator' is defined but never used.","'updateNewMessageBodyCreator' is defined but never used.","'addPostActionCreator' is defined but never used.","'updateNewPostTextActionCreator' is defined but never used.","'DialogItem' is defined but never used.","'DialogsType' is defined but never used.","'s' is defined but never used.","'withAuthRedirect' is defined but never used.","'setAuthUserData' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'addMessage' is assigned a value but never used.","'text' is assigned a value but never used.","'React' is defined but never used.","'setUserStatus' is defined but never used.","no-global-assign","no-unsafe-negation"]